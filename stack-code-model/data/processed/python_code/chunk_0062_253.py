/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.type.SharedNotebookInstanceRestrictions;

  /**
   * This structure captures information about the types of operations
   * that cannot be performed on a given notebook with a type of
   * authenticated access and credentials.  The values filled into this
   * structure are based on then-current values in the server database
   * for shared notebooks and notebook publishing records, as well as
   * information related to the authentication token.  Information from
   * the authentication token includes the application that is accessing
   * the server, as defined by the permissions granted by consumer (api)
   * key, and the method used to obtain the token, for example via
   * authenticateToSharedNotebook, authenticateToBusiness, etc.  Note
   * that changes to values in this structure that are the result of
   * shared notebook or publishing record changes are communicated to
   * the client via a change in the notebook USN during sync.  It is
   * important to use the same access method, parameters, and consumer
   * key in order obtain correct results from the sync engine.
   * 
   * The server has the final say on what is allowed as values may
   * change between calls to obtain NotebookRestrictions instances
   * and to operate on data on the service.
   * 
   * If the following are set and true, then the given restriction is
   * in effect, as accessed by the same authentication token from which
   * the values were obtained.
   * 
   * <dt>noReadNotes</dt>
   *   <dd>The client is not able to read notes from the service and
   *   the notebook is write-only.
   *   </dd>
   * <dt>noCreateNotes</dt>
   *   <dd>The client may not create new notes in the notebook.
   *   </dd>
   * <dt>noUpdateNotes</dt>
   *   <dd>The client may not update notes currently in the notebook.
   *   </dd>
   * <dt>noExpungeNotes</dt>
   *   <dd>The client may not expunge notes currently in the notebook.
   *   </dd>
   * <dt>noShareNotes</dt>
   *   <dd>The client may not share notes in the notebook via the
   *   shareNote method.
   *   </dd>
   * <dt>noEmailNotes</dt>
   *   <dd>The client may not e-mail notes via the Evernote service by
   *   using the emailNote method.
   *   </dd>
   * <dt>noSendMessageToRecipients</dt>
   *   <dd>The client may not send messages to the share recipients of
   *   the notebook.
   *   </dd>
   * <dt>noUpdateNotebook</dt>
   *   <dd>The client may not update the Notebook object itself, for
   *   example, via the updateNotebook method.
   *   </dd>
   * <dt>noExpungeNotebook</dt>
   *   <dd>The client may not expunge the Notebook object itself, for
   *   example, via the expungeNotebook method.
   *   </dd>
   * <dt>noSetDefaultNotebook</dt>
   *   <dd>The client may not set this notebook to be the default notebook.
   *   The caller should leave Notebook.defaultNotebook unset.
   *   </dd>
   * <dt>noSetNotebookStack</dt>
   *   <dd>If the client is able to update the Notebook, the Notebook.stack
   *   value may not be set.
   *   </dd>
   * <dt>noPublishToPublic</dt>
   *   <dd>The client may not change the publish the notebook to the public.
   *   For example, business notebooks may not be shared publicly.
   *   </dd>
   * <dt>noPublishToBusinessLibrary</dt>
   *   <dd>The client may not publish the notebook to the business library.
   *   </dd>
   * <dt>noCreateTags</dt>
   *   <dd>The client may not complete an operation that results in a new tag
   *   being created in the owner's account.
   *   </dd>
   * <dt>noUpdateTags</dt>
   *   <dd>The client may not update tags in the owner's account.
   *   </dd>
   * <dt>noExpungeTags</dt>
   *   <dd>The client may not expunge tags in the owner's account.
   *   </dd>
   * <dt>noSetParentTag</dt>
   *   <dd>If the client is able to create or update tags in the owner's account,
   *   then they will not be able to set the parent tag.  Leave the value unset.
   *   </dd>
   * <dt>noCreateSharedNotebooks</dt>
   *   <dd>The client is unable to create shared notebooks for the notebook.
   *   </dd>
   * <dt>updateWhichSharedNotebookRestrictions</dt>
   *   <dd>Restrictions on which shared notebook instances can be updated.  If the
   *   value is not set or null, then the client can update any of the shared notebooks
   *   associated with the notebook on which the NotebookRestrictions are defined.
   *   See the enumeration for further details.
   *   </dd>
   * <dt>expungeWhichSharedNotebookRestrictions</dt>
   *   <dd>Restrictions on which shared notebook instances can be expunged.  If the
   *   value is not set or null, then the client can expunge any of the shared notebooks
   *   associated with the notebook on which the NotebookRestrictions are defined.
   *   See the enumeration for further details.
   *   </dd>
   */
  public class NotebookRestrictions implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("NotebookRestrictions");
    private static const NO_READ_NOTES_FIELD_DESC:TField = new TField("noReadNotes", TType.BOOL, 1);
    private static const NO_CREATE_NOTES_FIELD_DESC:TField = new TField("noCreateNotes", TType.BOOL, 2);
    private static const NO_UPDATE_NOTES_FIELD_DESC:TField = new TField("noUpdateNotes", TType.BOOL, 3);
    private static const NO_EXPUNGE_NOTES_FIELD_DESC:TField = new TField("noExpungeNotes", TType.BOOL, 4);
    private static const NO_SHARE_NOTES_FIELD_DESC:TField = new TField("noShareNotes", TType.BOOL, 5);
    private static const NO_EMAIL_NOTES_FIELD_DESC:TField = new TField("noEmailNotes", TType.BOOL, 6);
    private static const NO_SEND_MESSAGE_TO_RECIPIENTS_FIELD_DESC:TField = new TField("noSendMessageToRecipients", TType.BOOL, 7);
    private static const NO_UPDATE_NOTEBOOK_FIELD_DESC:TField = new TField("noUpdateNotebook", TType.BOOL, 8);
    private static const NO_EXPUNGE_NOTEBOOK_FIELD_DESC:TField = new TField("noExpungeNotebook", TType.BOOL, 9);
    private static const NO_SET_DEFAULT_NOTEBOOK_FIELD_DESC:TField = new TField("noSetDefaultNotebook", TType.BOOL, 10);
    private static const NO_SET_NOTEBOOK_STACK_FIELD_DESC:TField = new TField("noSetNotebookStack", TType.BOOL, 11);
    private static const NO_PUBLISH_TO_PUBLIC_FIELD_DESC:TField = new TField("noPublishToPublic", TType.BOOL, 12);
    private static const NO_PUBLISH_TO_BUSINESS_LIBRARY_FIELD_DESC:TField = new TField("noPublishToBusinessLibrary", TType.BOOL, 13);
    private static const NO_CREATE_TAGS_FIELD_DESC:TField = new TField("noCreateTags", TType.BOOL, 14);
    private static const NO_UPDATE_TAGS_FIELD_DESC:TField = new TField("noUpdateTags", TType.BOOL, 15);
    private static const NO_EXPUNGE_TAGS_FIELD_DESC:TField = new TField("noExpungeTags", TType.BOOL, 16);
    private static const NO_SET_PARENT_TAG_FIELD_DESC:TField = new TField("noSetParentTag", TType.BOOL, 17);
    private static const NO_CREATE_SHARED_NOTEBOOKS_FIELD_DESC:TField = new TField("noCreateSharedNotebooks", TType.BOOL, 18);
    private static const UPDATE_WHICH_SHARED_NOTEBOOK_RESTRICTIONS_FIELD_DESC:TField = new TField("updateWhichSharedNotebookRestrictions", TType.I32, 19);
    private static const EXPUNGE_WHICH_SHARED_NOTEBOOK_RESTRICTIONS_FIELD_DESC:TField = new TField("expungeWhichSharedNotebookRestrictions", TType.I32, 20);

    private var _noReadNotes:Boolean;
    public static const NOREADNOTES:int = 1;
    private var _noCreateNotes:Boolean;
    public static const NOCREATENOTES:int = 2;
    private var _noUpdateNotes:Boolean;
    public static const NOUPDATENOTES:int = 3;
    private var _noExpungeNotes:Boolean;
    public static const NOEXPUNGENOTES:int = 4;
    private var _noShareNotes:Boolean;
    public static const NOSHARENOTES:int = 5;
    private var _noEmailNotes:Boolean;
    public static const NOEMAILNOTES:int = 6;
    private var _noSendMessageToRecipients:Boolean;
    public static const NOSENDMESSAGETORECIPIENTS:int = 7;
    private var _noUpdateNotebook:Boolean;
    public static const NOUPDATENOTEBOOK:int = 8;
    private var _noExpungeNotebook:Boolean;
    public static const NOEXPUNGENOTEBOOK:int = 9;
    private var _noSetDefaultNotebook:Boolean;
    public static const NOSETDEFAULTNOTEBOOK:int = 10;
    private var _noSetNotebookStack:Boolean;
    public static const NOSETNOTEBOOKSTACK:int = 11;
    private var _noPublishToPublic:Boolean;
    public static const NOPUBLISHTOPUBLIC:int = 12;
    private var _noPublishToBusinessLibrary:Boolean;
    public static const NOPUBLISHTOBUSINESSLIBRARY:int = 13;
    private var _noCreateTags:Boolean;
    public static const NOCREATETAGS:int = 14;
    private var _noUpdateTags:Boolean;
    public static const NOUPDATETAGS:int = 15;
    private var _noExpungeTags:Boolean;
    public static const NOEXPUNGETAGS:int = 16;
    private var _noSetParentTag:Boolean;
    public static const NOSETPARENTTAG:int = 17;
    private var _noCreateSharedNotebooks:Boolean;
    public static const NOCREATESHAREDNOTEBOOKS:int = 18;
    private var _updateWhichSharedNotebookRestrictions:int;
    public static const UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS:int = 19;
    private var _expungeWhichSharedNotebookRestrictions:int;
    public static const EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS:int = 20;

    private var __isset_noReadNotes:Boolean = false;
    private var __isset_noCreateNotes:Boolean = false;
    private var __isset_noUpdateNotes:Boolean = false;
    private var __isset_noExpungeNotes:Boolean = false;
    private var __isset_noShareNotes:Boolean = false;
    private var __isset_noEmailNotes:Boolean = false;
    private var __isset_noSendMessageToRecipients:Boolean = false;
    private var __isset_noUpdateNotebook:Boolean = false;
    private var __isset_noExpungeNotebook:Boolean = false;
    private var __isset_noSetDefaultNotebook:Boolean = false;
    private var __isset_noSetNotebookStack:Boolean = false;
    private var __isset_noPublishToPublic:Boolean = false;
    private var __isset_noPublishToBusinessLibrary:Boolean = false;
    private var __isset_noCreateTags:Boolean = false;
    private var __isset_noUpdateTags:Boolean = false;
    private var __isset_noExpungeTags:Boolean = false;
    private var __isset_noSetParentTag:Boolean = false;
    private var __isset_noCreateSharedNotebooks:Boolean = false;
    private var __isset_updateWhichSharedNotebookRestrictions:Boolean = false;
    private var __isset_expungeWhichSharedNotebookRestrictions:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NOREADNOTES] = new FieldMetaData("noReadNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOCREATENOTES] = new FieldMetaData("noCreateNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOUPDATENOTES] = new FieldMetaData("noUpdateNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOEXPUNGENOTES] = new FieldMetaData("noExpungeNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOSHARENOTES] = new FieldMetaData("noShareNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOEMAILNOTES] = new FieldMetaData("noEmailNotes", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOSENDMESSAGETORECIPIENTS] = new FieldMetaData("noSendMessageToRecipients", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOUPDATENOTEBOOK] = new FieldMetaData("noUpdateNotebook", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOEXPUNGENOTEBOOK] = new FieldMetaData("noExpungeNotebook", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOSETDEFAULTNOTEBOOK] = new FieldMetaData("noSetDefaultNotebook", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOSETNOTEBOOKSTACK] = new FieldMetaData("noSetNotebookStack", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOPUBLISHTOPUBLIC] = new FieldMetaData("noPublishToPublic", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOPUBLISHTOBUSINESSLIBRARY] = new FieldMetaData("noPublishToBusinessLibrary", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOCREATETAGS] = new FieldMetaData("noCreateTags", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOUPDATETAGS] = new FieldMetaData("noUpdateTags", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOEXPUNGETAGS] = new FieldMetaData("noExpungeTags", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOSETPARENTTAG] = new FieldMetaData("noSetParentTag", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[NOCREATESHAREDNOTEBOOKS] = new FieldMetaData("noCreateSharedNotebooks", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS] = new FieldMetaData("updateWhichSharedNotebookRestrictions", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS] = new FieldMetaData("expungeWhichSharedNotebookRestrictions", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(NotebookRestrictions, metaDataMap);
    }

    public function NotebookRestrictions() {
    }

    public function get noReadNotes():Boolean {
      return this._noReadNotes;
    }

    public function set noReadNotes(noReadNotes:Boolean):void {
      this._noReadNotes = noReadNotes;
      this.__isset_noReadNotes = true;
    }

    public function unsetNoReadNotes():void {
      this.__isset_noReadNotes = false;
    }

    // Returns true if field noReadNotes is set (has been assigned a value) and false otherwise
    public function isSetNoReadNotes():Boolean {
      return this.__isset_noReadNotes;
    }

    public function get noCreateNotes():Boolean {
      return this._noCreateNotes;
    }

    public function set noCreateNotes(noCreateNotes:Boolean):void {
      this._noCreateNotes = noCreateNotes;
      this.__isset_noCreateNotes = true;
    }

    public function unsetNoCreateNotes():void {
      this.__isset_noCreateNotes = false;
    }

    // Returns true if field noCreateNotes is set (has been assigned a value) and false otherwise
    public function isSetNoCreateNotes():Boolean {
      return this.__isset_noCreateNotes;
    }

    public function get noUpdateNotes():Boolean {
      return this._noUpdateNotes;
    }

    public function set noUpdateNotes(noUpdateNotes:Boolean):void {
      this._noUpdateNotes = noUpdateNotes;
      this.__isset_noUpdateNotes = true;
    }

    public function unsetNoUpdateNotes():void {
      this.__isset_noUpdateNotes = false;
    }

    // Returns true if field noUpdateNotes is set (has been assigned a value) and false otherwise
    public function isSetNoUpdateNotes():Boolean {
      return this.__isset_noUpdateNotes;
    }

    public function get noExpungeNotes():Boolean {
      return this._noExpungeNotes;
    }

    public function set noExpungeNotes(noExpungeNotes:Boolean):void {
      this._noExpungeNotes = noExpungeNotes;
      this.__isset_noExpungeNotes = true;
    }

    public function unsetNoExpungeNotes():void {
      this.__isset_noExpungeNotes = false;
    }

    // Returns true if field noExpungeNotes is set (has been assigned a value) and false otherwise
    public function isSetNoExpungeNotes():Boolean {
      return this.__isset_noExpungeNotes;
    }

    public function get noShareNotes():Boolean {
      return this._noShareNotes;
    }

    public function set noShareNotes(noShareNotes:Boolean):void {
      this._noShareNotes = noShareNotes;
      this.__isset_noShareNotes = true;
    }

    public function unsetNoShareNotes():void {
      this.__isset_noShareNotes = false;
    }

    // Returns true if field noShareNotes is set (has been assigned a value) and false otherwise
    public function isSetNoShareNotes():Boolean {
      return this.__isset_noShareNotes;
    }

    public function get noEmailNotes():Boolean {
      return this._noEmailNotes;
    }

    public function set noEmailNotes(noEmailNotes:Boolean):void {
      this._noEmailNotes = noEmailNotes;
      this.__isset_noEmailNotes = true;
    }

    public function unsetNoEmailNotes():void {
      this.__isset_noEmailNotes = false;
    }

    // Returns true if field noEmailNotes is set (has been assigned a value) and false otherwise
    public function isSetNoEmailNotes():Boolean {
      return this.__isset_noEmailNotes;
    }

    public function get noSendMessageToRecipients():Boolean {
      return this._noSendMessageToRecipients;
    }

    public function set noSendMessageToRecipients(noSendMessageToRecipients:Boolean):void {
      this._noSendMessageToRecipients = noSendMessageToRecipients;
      this.__isset_noSendMessageToRecipients = true;
    }

    public function unsetNoSendMessageToRecipients():void {
      this.__isset_noSendMessageToRecipients = false;
    }

    // Returns true if field noSendMessageToRecipients is set (has been assigned a value) and false otherwise
    public function isSetNoSendMessageToRecipients():Boolean {
      return this.__isset_noSendMessageToRecipients;
    }

    public function get noUpdateNotebook():Boolean {
      return this._noUpdateNotebook;
    }

    public function set noUpdateNotebook(noUpdateNotebook:Boolean):void {
      this._noUpdateNotebook = noUpdateNotebook;
      this.__isset_noUpdateNotebook = true;
    }

    public function unsetNoUpdateNotebook():void {
      this.__isset_noUpdateNotebook = false;
    }

    // Returns true if field noUpdateNotebook is set (has been assigned a value) and false otherwise
    public function isSetNoUpdateNotebook():Boolean {
      return this.__isset_noUpdateNotebook;
    }

    public function get noExpungeNotebook():Boolean {
      return this._noExpungeNotebook;
    }

    public function set noExpungeNotebook(noExpungeNotebook:Boolean):void {
      this._noExpungeNotebook = noExpungeNotebook;
      this.__isset_noExpungeNotebook = true;
    }

    public function unsetNoExpungeNotebook():void {
      this.__isset_noExpungeNotebook = false;
    }

    // Returns true if field noExpungeNotebook is set (has been assigned a value) and false otherwise
    public function isSetNoExpungeNotebook():Boolean {
      return this.__isset_noExpungeNotebook;
    }

    public function get noSetDefaultNotebook():Boolean {
      return this._noSetDefaultNotebook;
    }

    public function set noSetDefaultNotebook(noSetDefaultNotebook:Boolean):void {
      this._noSetDefaultNotebook = noSetDefaultNotebook;
      this.__isset_noSetDefaultNotebook = true;
    }

    public function unsetNoSetDefaultNotebook():void {
      this.__isset_noSetDefaultNotebook = false;
    }

    // Returns true if field noSetDefaultNotebook is set (has been assigned a value) and false otherwise
    public function isSetNoSetDefaultNotebook():Boolean {
      return this.__isset_noSetDefaultNotebook;
    }

    public function get noSetNotebookStack():Boolean {
      return this._noSetNotebookStack;
    }

    public function set noSetNotebookStack(noSetNotebookStack:Boolean):void {
      this._noSetNotebookStack = noSetNotebookStack;
      this.__isset_noSetNotebookStack = true;
    }

    public function unsetNoSetNotebookStack():void {
      this.__isset_noSetNotebookStack = false;
    }

    // Returns true if field noSetNotebookStack is set (has been assigned a value) and false otherwise
    public function isSetNoSetNotebookStack():Boolean {
      return this.__isset_noSetNotebookStack;
    }

    public function get noPublishToPublic():Boolean {
      return this._noPublishToPublic;
    }

    public function set noPublishToPublic(noPublishToPublic:Boolean):void {
      this._noPublishToPublic = noPublishToPublic;
      this.__isset_noPublishToPublic = true;
    }

    public function unsetNoPublishToPublic():void {
      this.__isset_noPublishToPublic = false;
    }

    // Returns true if field noPublishToPublic is set (has been assigned a value) and false otherwise
    public function isSetNoPublishToPublic():Boolean {
      return this.__isset_noPublishToPublic;
    }

    public function get noPublishToBusinessLibrary():Boolean {
      return this._noPublishToBusinessLibrary;
    }

    public function set noPublishToBusinessLibrary(noPublishToBusinessLibrary:Boolean):void {
      this._noPublishToBusinessLibrary = noPublishToBusinessLibrary;
      this.__isset_noPublishToBusinessLibrary = true;
    }

    public function unsetNoPublishToBusinessLibrary():void {
      this.__isset_noPublishToBusinessLibrary = false;
    }

    // Returns true if field noPublishToBusinessLibrary is set (has been assigned a value) and false otherwise
    public function isSetNoPublishToBusinessLibrary():Boolean {
      return this.__isset_noPublishToBusinessLibrary;
    }

    public function get noCreateTags():Boolean {
      return this._noCreateTags;
    }

    public function set noCreateTags(noCreateTags:Boolean):void {
      this._noCreateTags = noCreateTags;
      this.__isset_noCreateTags = true;
    }

    public function unsetNoCreateTags():void {
      this.__isset_noCreateTags = false;
    }

    // Returns true if field noCreateTags is set (has been assigned a value) and false otherwise
    public function isSetNoCreateTags():Boolean {
      return this.__isset_noCreateTags;
    }

    public function get noUpdateTags():Boolean {
      return this._noUpdateTags;
    }

    public function set noUpdateTags(noUpdateTags:Boolean):void {
      this._noUpdateTags = noUpdateTags;
      this.__isset_noUpdateTags = true;
    }

    public function unsetNoUpdateTags():void {
      this.__isset_noUpdateTags = false;
    }

    // Returns true if field noUpdateTags is set (has been assigned a value) and false otherwise
    public function isSetNoUpdateTags():Boolean {
      return this.__isset_noUpdateTags;
    }

    public function get noExpungeTags():Boolean {
      return this._noExpungeTags;
    }

    public function set noExpungeTags(noExpungeTags:Boolean):void {
      this._noExpungeTags = noExpungeTags;
      this.__isset_noExpungeTags = true;
    }

    public function unsetNoExpungeTags():void {
      this.__isset_noExpungeTags = false;
    }

    // Returns true if field noExpungeTags is set (has been assigned a value) and false otherwise
    public function isSetNoExpungeTags():Boolean {
      return this.__isset_noExpungeTags;
    }

    public function get noSetParentTag():Boolean {
      return this._noSetParentTag;
    }

    public function set noSetParentTag(noSetParentTag:Boolean):void {
      this._noSetParentTag = noSetParentTag;
      this.__isset_noSetParentTag = true;
    }

    public function unsetNoSetParentTag():void {
      this.__isset_noSetParentTag = false;
    }

    // Returns true if field noSetParentTag is set (has been assigned a value) and false otherwise
    public function isSetNoSetParentTag():Boolean {
      return this.__isset_noSetParentTag;
    }

    public function get noCreateSharedNotebooks():Boolean {
      return this._noCreateSharedNotebooks;
    }

    public function set noCreateSharedNotebooks(noCreateSharedNotebooks:Boolean):void {
      this._noCreateSharedNotebooks = noCreateSharedNotebooks;
      this.__isset_noCreateSharedNotebooks = true;
    }

    public function unsetNoCreateSharedNotebooks():void {
      this.__isset_noCreateSharedNotebooks = false;
    }

    // Returns true if field noCreateSharedNotebooks is set (has been assigned a value) and false otherwise
    public function isSetNoCreateSharedNotebooks():Boolean {
      return this.__isset_noCreateSharedNotebooks;
    }

    public function get updateWhichSharedNotebookRestrictions():int {
      return this._updateWhichSharedNotebookRestrictions;
    }

    public function set updateWhichSharedNotebookRestrictions(updateWhichSharedNotebookRestrictions:int):void {
      this._updateWhichSharedNotebookRestrictions = updateWhichSharedNotebookRestrictions;
      this.__isset_updateWhichSharedNotebookRestrictions = true;
    }

    public function unsetUpdateWhichSharedNotebookRestrictions():void {
      this.__isset_updateWhichSharedNotebookRestrictions = false;
    }

    // Returns true if field updateWhichSharedNotebookRestrictions is set (has been assigned a value) and false otherwise
    public function isSetUpdateWhichSharedNotebookRestrictions():Boolean {
      return this.__isset_updateWhichSharedNotebookRestrictions;
    }

    public function get expungeWhichSharedNotebookRestrictions():int {
      return this._expungeWhichSharedNotebookRestrictions;
    }

    public function set expungeWhichSharedNotebookRestrictions(expungeWhichSharedNotebookRestrictions:int):void {
      this._expungeWhichSharedNotebookRestrictions = expungeWhichSharedNotebookRestrictions;
      this.__isset_expungeWhichSharedNotebookRestrictions = true;
    }

    public function unsetExpungeWhichSharedNotebookRestrictions():void {
      this.__isset_expungeWhichSharedNotebookRestrictions = false;
    }

    // Returns true if field expungeWhichSharedNotebookRestrictions is set (has been assigned a value) and false otherwise
    public function isSetExpungeWhichSharedNotebookRestrictions():Boolean {
      return this.__isset_expungeWhichSharedNotebookRestrictions;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NOREADNOTES:
        if (value == null) {
          unsetNoReadNotes();
        } else {
          this.noReadNotes = value;
        }
        break;

      case NOCREATENOTES:
        if (value == null) {
          unsetNoCreateNotes();
        } else {
          this.noCreateNotes = value;
        }
        break;

      case NOUPDATENOTES:
        if (value == null) {
          unsetNoUpdateNotes();
        } else {
          this.noUpdateNotes = value;
        }
        break;

      case NOEXPUNGENOTES:
        if (value == null) {
          unsetNoExpungeNotes();
        } else {
          this.noExpungeNotes = value;
        }
        break;

      case NOSHARENOTES:
        if (value == null) {
          unsetNoShareNotes();
        } else {
          this.noShareNotes = value;
        }
        break;

      case NOEMAILNOTES:
        if (value == null) {
          unsetNoEmailNotes();
        } else {
          this.noEmailNotes = value;
        }
        break;

      case NOSENDMESSAGETORECIPIENTS:
        if (value == null) {
          unsetNoSendMessageToRecipients();
        } else {
          this.noSendMessageToRecipients = value;
        }
        break;

      case NOUPDATENOTEBOOK:
        if (value == null) {
          unsetNoUpdateNotebook();
        } else {
          this.noUpdateNotebook = value;
        }
        break;

      case NOEXPUNGENOTEBOOK:
        if (value == null) {
          unsetNoExpungeNotebook();
        } else {
          this.noExpungeNotebook = value;
        }
        break;

      case NOSETDEFAULTNOTEBOOK:
        if (value == null) {
          unsetNoSetDefaultNotebook();
        } else {
          this.noSetDefaultNotebook = value;
        }
        break;

      case NOSETNOTEBOOKSTACK:
        if (value == null) {
          unsetNoSetNotebookStack();
        } else {
          this.noSetNotebookStack = value;
        }
        break;

      case NOPUBLISHTOPUBLIC:
        if (value == null) {
          unsetNoPublishToPublic();
        } else {
          this.noPublishToPublic = value;
        }
        break;

      case NOPUBLISHTOBUSINESSLIBRARY:
        if (value == null) {
          unsetNoPublishToBusinessLibrary();
        } else {
          this.noPublishToBusinessLibrary = value;
        }
        break;

      case NOCREATETAGS:
        if (value == null) {
          unsetNoCreateTags();
        } else {
          this.noCreateTags = value;
        }
        break;

      case NOUPDATETAGS:
        if (value == null) {
          unsetNoUpdateTags();
        } else {
          this.noUpdateTags = value;
        }
        break;

      case NOEXPUNGETAGS:
        if (value == null) {
          unsetNoExpungeTags();
        } else {
          this.noExpungeTags = value;
        }
        break;

      case NOSETPARENTTAG:
        if (value == null) {
          unsetNoSetParentTag();
        } else {
          this.noSetParentTag = value;
        }
        break;

      case NOCREATESHAREDNOTEBOOKS:
        if (value == null) {
          unsetNoCreateSharedNotebooks();
        } else {
          this.noCreateSharedNotebooks = value;
        }
        break;

      case UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        if (value == null) {
          unsetUpdateWhichSharedNotebookRestrictions();
        } else {
          this.updateWhichSharedNotebookRestrictions = value;
        }
        break;

      case EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        if (value == null) {
          unsetExpungeWhichSharedNotebookRestrictions();
        } else {
          this.expungeWhichSharedNotebookRestrictions = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NOREADNOTES:
        return this.noReadNotes;
      case NOCREATENOTES:
        return this.noCreateNotes;
      case NOUPDATENOTES:
        return this.noUpdateNotes;
      case NOEXPUNGENOTES:
        return this.noExpungeNotes;
      case NOSHARENOTES:
        return this.noShareNotes;
      case NOEMAILNOTES:
        return this.noEmailNotes;
      case NOSENDMESSAGETORECIPIENTS:
        return this.noSendMessageToRecipients;
      case NOUPDATENOTEBOOK:
        return this.noUpdateNotebook;
      case NOEXPUNGENOTEBOOK:
        return this.noExpungeNotebook;
      case NOSETDEFAULTNOTEBOOK:
        return this.noSetDefaultNotebook;
      case NOSETNOTEBOOKSTACK:
        return this.noSetNotebookStack;
      case NOPUBLISHTOPUBLIC:
        return this.noPublishToPublic;
      case NOPUBLISHTOBUSINESSLIBRARY:
        return this.noPublishToBusinessLibrary;
      case NOCREATETAGS:
        return this.noCreateTags;
      case NOUPDATETAGS:
        return this.noUpdateTags;
      case NOEXPUNGETAGS:
        return this.noExpungeTags;
      case NOSETPARENTTAG:
        return this.noSetParentTag;
      case NOCREATESHAREDNOTEBOOKS:
        return this.noCreateSharedNotebooks;
      case UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        return this.updateWhichSharedNotebookRestrictions;
      case EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        return this.expungeWhichSharedNotebookRestrictions;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NOREADNOTES:
        return isSetNoReadNotes();
      case NOCREATENOTES:
        return isSetNoCreateNotes();
      case NOUPDATENOTES:
        return isSetNoUpdateNotes();
      case NOEXPUNGENOTES:
        return isSetNoExpungeNotes();
      case NOSHARENOTES:
        return isSetNoShareNotes();
      case NOEMAILNOTES:
        return isSetNoEmailNotes();
      case NOSENDMESSAGETORECIPIENTS:
        return isSetNoSendMessageToRecipients();
      case NOUPDATENOTEBOOK:
        return isSetNoUpdateNotebook();
      case NOEXPUNGENOTEBOOK:
        return isSetNoExpungeNotebook();
      case NOSETDEFAULTNOTEBOOK:
        return isSetNoSetDefaultNotebook();
      case NOSETNOTEBOOKSTACK:
        return isSetNoSetNotebookStack();
      case NOPUBLISHTOPUBLIC:
        return isSetNoPublishToPublic();
      case NOPUBLISHTOBUSINESSLIBRARY:
        return isSetNoPublishToBusinessLibrary();
      case NOCREATETAGS:
        return isSetNoCreateTags();
      case NOUPDATETAGS:
        return isSetNoUpdateTags();
      case NOEXPUNGETAGS:
        return isSetNoExpungeTags();
      case NOSETPARENTTAG:
        return isSetNoSetParentTag();
      case NOCREATESHAREDNOTEBOOKS:
        return isSetNoCreateSharedNotebooks();
      case UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        return isSetUpdateWhichSharedNotebookRestrictions();
      case EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS:
        return isSetExpungeWhichSharedNotebookRestrictions();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOREADNOTES:
            if (field.type == TType.BOOL) {
              this.noReadNotes = iprot.readBool();
              this.__isset_noReadNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOCREATENOTES:
            if (field.type == TType.BOOL) {
              this.noCreateNotes = iprot.readBool();
              this.__isset_noCreateNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOUPDATENOTES:
            if (field.type == TType.BOOL) {
              this.noUpdateNotes = iprot.readBool();
              this.__isset_noUpdateNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOEXPUNGENOTES:
            if (field.type == TType.BOOL) {
              this.noExpungeNotes = iprot.readBool();
              this.__isset_noExpungeNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOSHARENOTES:
            if (field.type == TType.BOOL) {
              this.noShareNotes = iprot.readBool();
              this.__isset_noShareNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOEMAILNOTES:
            if (field.type == TType.BOOL) {
              this.noEmailNotes = iprot.readBool();
              this.__isset_noEmailNotes = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOSENDMESSAGETORECIPIENTS:
            if (field.type == TType.BOOL) {
              this.noSendMessageToRecipients = iprot.readBool();
              this.__isset_noSendMessageToRecipients = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOUPDATENOTEBOOK:
            if (field.type == TType.BOOL) {
              this.noUpdateNotebook = iprot.readBool();
              this.__isset_noUpdateNotebook = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOEXPUNGENOTEBOOK:
            if (field.type == TType.BOOL) {
              this.noExpungeNotebook = iprot.readBool();
              this.__isset_noExpungeNotebook = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOSETDEFAULTNOTEBOOK:
            if (field.type == TType.BOOL) {
              this.noSetDefaultNotebook = iprot.readBool();
              this.__isset_noSetDefaultNotebook = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOSETNOTEBOOKSTACK:
            if (field.type == TType.BOOL) {
              this.noSetNotebookStack = iprot.readBool();
              this.__isset_noSetNotebookStack = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOPUBLISHTOPUBLIC:
            if (field.type == TType.BOOL) {
              this.noPublishToPublic = iprot.readBool();
              this.__isset_noPublishToPublic = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOPUBLISHTOBUSINESSLIBRARY:
            if (field.type == TType.BOOL) {
              this.noPublishToBusinessLibrary = iprot.readBool();
              this.__isset_noPublishToBusinessLibrary = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOCREATETAGS:
            if (field.type == TType.BOOL) {
              this.noCreateTags = iprot.readBool();
              this.__isset_noCreateTags = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOUPDATETAGS:
            if (field.type == TType.BOOL) {
              this.noUpdateTags = iprot.readBool();
              this.__isset_noUpdateTags = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOEXPUNGETAGS:
            if (field.type == TType.BOOL) {
              this.noExpungeTags = iprot.readBool();
              this.__isset_noExpungeTags = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOSETPARENTTAG:
            if (field.type == TType.BOOL) {
              this.noSetParentTag = iprot.readBool();
              this.__isset_noSetParentTag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NOCREATESHAREDNOTEBOOKS:
            if (field.type == TType.BOOL) {
              this.noCreateSharedNotebooks = iprot.readBool();
              this.__isset_noCreateSharedNotebooks = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATEWHICHSHAREDNOTEBOOKRESTRICTIONS:
            if (field.type == TType.I32) {
              this.updateWhichSharedNotebookRestrictions = iprot.readI32();
              this.__isset_updateWhichSharedNotebookRestrictions = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EXPUNGEWHICHSHAREDNOTEBOOKRESTRICTIONS:
            if (field.type == TType.I32) {
              this.expungeWhichSharedNotebookRestrictions = iprot.readI32();
              this.__isset_expungeWhichSharedNotebookRestrictions = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (isSetNoReadNotes()) {
        oprot.writeFieldBegin(NO_READ_NOTES_FIELD_DESC);
        oprot.writeBool(this.noReadNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoCreateNotes()) {
        oprot.writeFieldBegin(NO_CREATE_NOTES_FIELD_DESC);
        oprot.writeBool(this.noCreateNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoUpdateNotes()) {
        oprot.writeFieldBegin(NO_UPDATE_NOTES_FIELD_DESC);
        oprot.writeBool(this.noUpdateNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoExpungeNotes()) {
        oprot.writeFieldBegin(NO_EXPUNGE_NOTES_FIELD_DESC);
        oprot.writeBool(this.noExpungeNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoShareNotes()) {
        oprot.writeFieldBegin(NO_SHARE_NOTES_FIELD_DESC);
        oprot.writeBool(this.noShareNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoEmailNotes()) {
        oprot.writeFieldBegin(NO_EMAIL_NOTES_FIELD_DESC);
        oprot.writeBool(this.noEmailNotes);
        oprot.writeFieldEnd();
      }
      if (isSetNoSendMessageToRecipients()) {
        oprot.writeFieldBegin(NO_SEND_MESSAGE_TO_RECIPIENTS_FIELD_DESC);
        oprot.writeBool(this.noSendMessageToRecipients);
        oprot.writeFieldEnd();
      }
      if (isSetNoUpdateNotebook()) {
        oprot.writeFieldBegin(NO_UPDATE_NOTEBOOK_FIELD_DESC);
        oprot.writeBool(this.noUpdateNotebook);
        oprot.writeFieldEnd();
      }
      if (isSetNoExpungeNotebook()) {
        oprot.writeFieldBegin(NO_EXPUNGE_NOTEBOOK_FIELD_DESC);
        oprot.writeBool(this.noExpungeNotebook);
        oprot.writeFieldEnd();
      }
      if (isSetNoSetDefaultNotebook()) {
        oprot.writeFieldBegin(NO_SET_DEFAULT_NOTEBOOK_FIELD_DESC);
        oprot.writeBool(this.noSetDefaultNotebook);
        oprot.writeFieldEnd();
      }
      if (isSetNoSetNotebookStack()) {
        oprot.writeFieldBegin(NO_SET_NOTEBOOK_STACK_FIELD_DESC);
        oprot.writeBool(this.noSetNotebookStack);
        oprot.writeFieldEnd();
      }
      if (isSetNoPublishToPublic()) {
        oprot.writeFieldBegin(NO_PUBLISH_TO_PUBLIC_FIELD_DESC);
        oprot.writeBool(this.noPublishToPublic);
        oprot.writeFieldEnd();
      }
      if (isSetNoPublishToBusinessLibrary()) {
        oprot.writeFieldBegin(NO_PUBLISH_TO_BUSINESS_LIBRARY_FIELD_DESC);
        oprot.writeBool(this.noPublishToBusinessLibrary);
        oprot.writeFieldEnd();
      }
      if (isSetNoCreateTags()) {
        oprot.writeFieldBegin(NO_CREATE_TAGS_FIELD_DESC);
        oprot.writeBool(this.noCreateTags);
        oprot.writeFieldEnd();
      }
      if (isSetNoUpdateTags()) {
        oprot.writeFieldBegin(NO_UPDATE_TAGS_FIELD_DESC);
        oprot.writeBool(this.noUpdateTags);
        oprot.writeFieldEnd();
      }
      if (isSetNoExpungeTags()) {
        oprot.writeFieldBegin(NO_EXPUNGE_TAGS_FIELD_DESC);
        oprot.writeBool(this.noExpungeTags);
        oprot.writeFieldEnd();
      }
      if (isSetNoSetParentTag()) {
        oprot.writeFieldBegin(NO_SET_PARENT_TAG_FIELD_DESC);
        oprot.writeBool(this.noSetParentTag);
        oprot.writeFieldEnd();
      }
      if (isSetNoCreateSharedNotebooks()) {
        oprot.writeFieldBegin(NO_CREATE_SHARED_NOTEBOOKS_FIELD_DESC);
        oprot.writeBool(this.noCreateSharedNotebooks);
        oprot.writeFieldEnd();
      }
      if (isSetUpdateWhichSharedNotebookRestrictions()) {
        oprot.writeFieldBegin(UPDATE_WHICH_SHARED_NOTEBOOK_RESTRICTIONS_FIELD_DESC);
        oprot.writeI32(this.updateWhichSharedNotebookRestrictions);
        oprot.writeFieldEnd();
      }
      if (isSetExpungeWhichSharedNotebookRestrictions()) {
        oprot.writeFieldBegin(EXPUNGE_WHICH_SHARED_NOTEBOOK_RESTRICTIONS_FIELD_DESC);
        oprot.writeI32(this.expungeWhichSharedNotebookRestrictions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("NotebookRestrictions(");
      var first:Boolean = true;

      if (isSetNoReadNotes()) {
        ret += "noReadNotes:";
        ret += this.noReadNotes;
        first = false;
      }
      if (isSetNoCreateNotes()) {
        if (!first) ret +=  ", ";
        ret += "noCreateNotes:";
        ret += this.noCreateNotes;
        first = false;
      }
      if (isSetNoUpdateNotes()) {
        if (!first) ret +=  ", ";
        ret += "noUpdateNotes:";
        ret += this.noUpdateNotes;
        first = false;
      }
      if (isSetNoExpungeNotes()) {
        if (!first) ret +=  ", ";
        ret += "noExpungeNotes:";
        ret += this.noExpungeNotes;
        first = false;
      }
      if (isSetNoShareNotes()) {
        if (!first) ret +=  ", ";
        ret += "noShareNotes:";
        ret += this.noShareNotes;
        first = false;
      }
      if (isSetNoEmailNotes()) {
        if (!first) ret +=  ", ";
        ret += "noEmailNotes:";
        ret += this.noEmailNotes;
        first = false;
      }
      if (isSetNoSendMessageToRecipients()) {
        if (!first) ret +=  ", ";
        ret += "noSendMessageToRecipients:";
        ret += this.noSendMessageToRecipients;
        first = false;
      }
      if (isSetNoUpdateNotebook()) {
        if (!first) ret +=  ", ";
        ret += "noUpdateNotebook:";
        ret += this.noUpdateNotebook;
        first = false;
      }
      if (isSetNoExpungeNotebook()) {
        if (!first) ret +=  ", ";
        ret += "noExpungeNotebook:";
        ret += this.noExpungeNotebook;
        first = false;
      }
      if (isSetNoSetDefaultNotebook()) {
        if (!first) ret +=  ", ";
        ret += "noSetDefaultNotebook:";
        ret += this.noSetDefaultNotebook;
        first = false;
      }
      if (isSetNoSetNotebookStack()) {
        if (!first) ret +=  ", ";
        ret += "noSetNotebookStack:";
        ret += this.noSetNotebookStack;
        first = false;
      }
      if (isSetNoPublishToPublic()) {
        if (!first) ret +=  ", ";
        ret += "noPublishToPublic:";
        ret += this.noPublishToPublic;
        first = false;
      }
      if (isSetNoPublishToBusinessLibrary()) {
        if (!first) ret +=  ", ";
        ret += "noPublishToBusinessLibrary:";
        ret += this.noPublishToBusinessLibrary;
        first = false;
      }
      if (isSetNoCreateTags()) {
        if (!first) ret +=  ", ";
        ret += "noCreateTags:";
        ret += this.noCreateTags;
        first = false;
      }
      if (isSetNoUpdateTags()) {
        if (!first) ret +=  ", ";
        ret += "noUpdateTags:";
        ret += this.noUpdateTags;
        first = false;
      }
      if (isSetNoExpungeTags()) {
        if (!first) ret +=  ", ";
        ret += "noExpungeTags:";
        ret += this.noExpungeTags;
        first = false;
      }
      if (isSetNoSetParentTag()) {
        if (!first) ret +=  ", ";
        ret += "noSetParentTag:";
        ret += this.noSetParentTag;
        first = false;
      }
      if (isSetNoCreateSharedNotebooks()) {
        if (!first) ret +=  ", ";
        ret += "noCreateSharedNotebooks:";
        ret += this.noCreateSharedNotebooks;
        first = false;
      }
      if (isSetUpdateWhichSharedNotebookRestrictions()) {
        if (!first) ret +=  ", ";
        ret += "updateWhichSharedNotebookRestrictions:";
        var updateWhichSharedNotebookRestrictions_name:String = SharedNotebookInstanceRestrictions.VALUES_TO_NAMES[this.updateWhichSharedNotebookRestrictions];
        if (updateWhichSharedNotebookRestrictions_name != null) {
          ret += updateWhichSharedNotebookRestrictions_name;
          ret += " (";
        }
        ret += this.updateWhichSharedNotebookRestrictions;
        if (updateWhichSharedNotebookRestrictions_name != null) {
          ret += ")";
        }
        first = false;
      }
      if (isSetExpungeWhichSharedNotebookRestrictions()) {
        if (!first) ret +=  ", ";
        ret += "expungeWhichSharedNotebookRestrictions:";
        var expungeWhichSharedNotebookRestrictions_name:String = SharedNotebookInstanceRestrictions.VALUES_TO_NAMES[this.expungeWhichSharedNotebookRestrictions];
        if (expungeWhichSharedNotebookRestrictions_name != null) {
          ret += expungeWhichSharedNotebookRestrictions_name;
          ret += " (";
        }
        ret += this.expungeWhichSharedNotebookRestrictions;
        if (expungeWhichSharedNotebookRestrictions_name != null) {
          ret += ")";
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetUpdateWhichSharedNotebookRestrictions() && !SharedNotebookInstanceRestrictions.VALID_VALUES.contains(updateWhichSharedNotebookRestrictions)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'updateWhichSharedNotebookRestrictions' has been assigned the invalid value " + updateWhichSharedNotebookRestrictions);
      }
      if (isSetExpungeWhichSharedNotebookRestrictions() && !SharedNotebookInstanceRestrictions.VALID_VALUES.contains(expungeWhichSharedNotebookRestrictions)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'expungeWhichSharedNotebookRestrictions' has been assigned the invalid value " + expungeWhichSharedNotebookRestrictions);
      }
    }

  }

}