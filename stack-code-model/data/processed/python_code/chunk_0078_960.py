package com.lessrain.project.view {	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.SurfacesProxy;	import com.lessrain.project.model.vo.SurfaceData;	import com.lessrain.project.view.components.Application;	import com.lessrain.project.view.components.surfaces.ChooseSurfaceView;	import com.lessrain.project.view.components.surfaces.SurfaceEvent;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.events.Event;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class ChooseSurfaceMediator extends Mediator {			public static const NAME: String = getQualifiedClassName(ChooseSurfaceMediator);			public function ChooseSurfaceMediator(mainView_: ChooseSurfaceView = null){			super(NAME, mainView_);			chooseSurfaceView.addEventListener(SurfaceEvent.CLICK, sendSurfaceChosen);			chooseSurfaceView.addEventListener(SurfaceEvent.BUY, sendSurfaceBuy);			chooseSurfaceView.addEventListener(ChooseSurfaceView.ALL_THUMBS_LOADED, onAllThumbsLoaded);			chooseSurfaceView.addEventListener(ChooseSurfaceView.GO_TO_ARCHIVE, goToArchive);		}		private function goToArchive(event : Event) : void {			sendNotification(ApplicationFacade.SHOW_ARCHIVE);		}		private function onAllThumbsLoaded(event : Event) : void {			sendNotification(ApplicationFacade.ALL_THUMBS_LOADED);		}		private function sendSurfaceChosen(event : SurfaceEvent) : void {			sendNotification(ApplicationFacade.SURFACE_CHOSEN,event.surface);			chooseSurfaceView.visible = false;		}		private function sendSurfaceBuy(event : SurfaceEvent) : void {			sendNotification(ApplicationFacade.ITEM_BUY,event.surface);		}			override public function listNotificationInterests(): Array {			var interests:Array = new Array();			interests.push(StateMachine.CHANGED);			interests.push(SurfacesProxy.SURFACES_LOADED);			interests.push(ApplicationFacade.SHOW_CHOOSE_SURFACE_VIEW);			interests.push(ApplicationFacade.ITEM_BOUGHT);			interests.push(ApplicationFacade.SURFACE_NOT_AVAILABLE);			return interests;		}				override public function handleNotification(notification_: INotification): void {			switch( notification_.getName()){				case StateMachine.CHANGED:           					if (notification_.getType()==Application.STATE_MAIN) {						//chooseSurfaceView.initialize();					}					break;				case SurfacesProxy.SURFACES_LOADED:					if (notification_.getType() == SurfacesProxy.TYPE_SUCCESS){      						chooseSurfaceView.setSurfaces(notification_.getBody() as Vector.<SurfaceData>);					} else {						Debug.trace('ChooseSurfaceMediator::handleNotification: SURFACES_LOADED ERROR WHILE LOADING',Debug.ERROR);					}					break;				case ApplicationFacade.SHOW_CHOOSE_SURFACE_VIEW:						chooseSurfaceView.visible = true;					break;				case ApplicationFacade.ITEM_BOUGHT:						var surface:SurfaceData = notification_.getBody() as SurfaceData;						if(surface) chooseSurfaceView.onSurfaceBought(surface);					break;				case ApplicationFacade.SURFACE_NOT_AVAILABLE:						chooseSurfaceView.visible = true;					break;			}		}				override public function onRegister(): void {					}				override public function onRemove(): void {				}		protected function get chooseSurfaceView(): ChooseSurfaceView {			return viewComponent as ChooseSurfaceView;		}	}}