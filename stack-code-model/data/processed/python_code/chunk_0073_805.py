package com.lessrain.project.view {	import se.cambiata.utils.crypt.Simplecrypt;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.ApplicationParamsProxy;	import com.lessrain.project.model.vo.SurfaceData;	import com.lessrain.project.view.components.Application;	import com.lessrain.project.view.utils.LessMath;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class CheckSurfaceMediator extends Mediator {		public static const NAME : String = getQualifiedClassName(CheckSurfaceMediator);		private var _facebookId : String;		private var _surfaceKey : String;		private var _key : String;		private var _collabId : String;		private var _collabCanvas : String;			public function CheckSurfaceMediator(surfaceKey_ : String, collabId_ : String) {			_collabId = collabId_;			_surfaceKey = surfaceKey_;			super(NAME);		}		private function checkCollab() : void {			if (_collabId){			var request : URLRequest = new URLRequest("php/action/getCollab.php");			request.method = URLRequestMethod.POST;			var variables : URLVariables = new URLVariables();			variables.fbid = _facebookId;			variables.collab_id = _collabId;			request.data = variables;			var loader : URLLoader = new URLLoader(request);			loader.addEventListener(Event.COMPLETE, handleCheckedCollab);//			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.load(request);			} else {				checkSurface();			}		}		private function handleCheckedCollab(event : Event) : void {			var variables:URLVariables = new URLVariables();			variables.decode(String(event.target.data));			var success : Boolean = variables.status == 'success';			if (success == true){				_collabCanvas = variables.graffiti;				sendNotification(ApplicationFacade.COLLAB_CONFIRMED, variables.collaborators ,_collabId);				sendSurfaceApproved();				//checkSurface();			}			else {				var request:URLRequest = new URLRequest("index.php?source=game");				navigateToURL(request, "_self");			}		}		private function checkSurface() : void {			var request : URLRequest = new URLRequest("php/action/secure/6okunIsII89.php");			request.method = URLRequestMethod.POST;			var variables : URLVariables = new URLVariables();						_key = createRandomKey(LessMath.rand(5, 10));			variables.fbid = _facebookId;			variables.surface = _surfaceKey;			variables.gid = _key;			request.data = variables;			var loader : URLLoader = new URLLoader(request);			loader.addEventListener(Event.COMPLETE, handleCheckedSurface);//			loader.dataFormat = URLLoaderDataFormat.TEXT;			loader.load(request);		}		private function handleCheckedSurface(event : Event) : void {			var encoded:String = String(event.target.data);			var bool : String = Simplecrypt.decrypt(encoded,_key);			//100002572844577			if (bool == 'true' || _facebookId == '100002004384271'){				sendSurfaceApproved();			}			//if (bool == 'true' || _facebookId == '100002572844577'){			//	sendSurfaceApproved();			//}			else {				var request:URLRequest = new URLRequest("index.php?source=game");				navigateToURL(request, "_self");			}		}				private function sendSurfaceApproved():void{			var surface:SurfaceData = new SurfaceData();			surface.key = _surfaceKey;			sendNotification(ApplicationFacade.SURFACE_CHOSEN, surface ,_collabCanvas);		}		private function createRandomKey(amount : int) : String {			var keyset : String = "abcdefghijklmABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";			var randkey : String = "";			for (var i:int = 0; i < amount; i++) {				randkey += keyset.substr(LessMath.rand(0, keyset.length - 1), 1);			}			return randkey;		}		private function goToArchive(event : Event) : void {			sendNotification(ApplicationFacade.SHOW_ARCHIVE);		}		private function onAllThumbsLoaded(event : Event) : void {			sendNotification(ApplicationFacade.ALL_THUMBS_LOADED);		}			override public function listNotificationInterests(): Array {			var interests:Array = new Array();			interests.push(StateMachine.CHANGED);			return interests;		}				override public function handleNotification(notification_: INotification): void {			switch( notification_.getName()){				case StateMachine.CHANGED:           					if (notification_.getType()==Application.STATE_MAIN) {						checkCollab();					}					break;			}		}				override public function onRegister(): void {			_facebookId = ApplicationParamsProxy(facade.retrieveProxy(ApplicationParamsProxy.NAME)).getFacebookId();		}				override public function onRemove(): void {				}	}}