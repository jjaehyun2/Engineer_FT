package com.lessrain.project.view {	import com.lessrain.project.view.utils.ObjectPrinter;	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.ApplicationParamsProxy;	import com.lessrain.project.view.components.Application;	import com.lessrain.puremvc.assets.model.PropertiesProxy;	import com.lessrain.puremvc.swfaddress.model.SWFAddressProxy;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class ApplicationMediator extends Mediator {		public static const NAME : String = getQualifiedClassName(ApplicationMediator);		public function ApplicationMediator(application_ : Application = null) {			super(NAME, application_);		}		override public function listNotificationInterests() : Array {			var interests : Array = new Array();			interests.push(StateMachine.CHANGED);			interests.push(SWFAddressProxy.SWF_ADDRESS_CHANGED);			interests.push(ApplicationFacade.ALL_THUMBS_LOADED);			interests.push(ApplicationFacade.EDITOR_READY);			interests.push(ApplicationFacade.ARCHIVE_READY);			interests.push(ApplicationFacade.SURFACE_CHOSEN);			interests.push(ApplicationFacade.SURFACE_NOT_AVAILABLE);//			interests.push(TransitionViewProxy.SET_TRANSITION_VIEW);			return interests;		}		override public function handleNotification(notification_ : INotification) : void {			switch (notification_.getName()) {				case ApplicationFacade.ALL_THUMBS_LOADED:				case ApplicationFacade.EDITOR_READY://				case ApplicationFacade.ARCHIVE_READY:					application.hideLoadingScreen();					break;				case ApplicationFacade.SURFACE_CHOSEN:					application.showLoadingScreen();					break;//				case ApplicationFacade.SHOW_ARCHIVE://					application.showLoadingScreen();//					break;				case ApplicationFacade.SURFACE_NOT_AVAILABLE:					application.showError(notification_.getBody() as String);					break;					//				case TransitionViewProxy.SET_TRANSITION_VIEW://		 			var view : DummyView = notification_.getBody() as DummyView;//		 			application.applicationDisplayListManager.applicationContainer.addChild(view.display);//		 			break;			}		}
		override public function onRegister() : void {			var applicationParamsProxy : ApplicationParamsProxy = ApplicationParamsProxy(facade.retrieveProxy(ApplicationParamsProxy.NAME));			applicationParamsProxy.setAssetsSrc(application.getParam('assetsSrc'));			applicationParamsProxy.setDeeplink(application.getParam('deeplink'));			applicationParamsProxy.setFacebookId(application.getParam('fbid'));						var propertyProxy : PropertiesProxy = PropertiesProxy(facade.retrieveProxy(PropertiesProxy.NAME));			var params : * = application.params;			for(var child:* in params) {				propertyProxy.addProperty(child, params[child]);
			}					}		override public function onRemove() : void {		}		protected function get application() : Application {			return viewComponent as Application;		}	}}