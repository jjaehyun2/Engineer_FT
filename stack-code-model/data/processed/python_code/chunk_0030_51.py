/* Automatically generated by IntelliJ IDEA from Java, revision needed before production use */
/*
 * Copyright (c) 2008, Vaclav Slovacek. All Rights Reserved.
 *
 * Product: UIProtocol Java
 *
 * This source-code is released under following license:
 * - no release outside i2home project is allowed
 * - this copyright notice must be placed unmodified in every file derived from this source code
 */


package uidocument.commons.api.document {

/**
 * Interface describing what's happening on the client side when an event gets executed.
 */
public class Action {

    private var id:String;
    private var execution:String;
    private var access:String;
    private var updates:Vector.<ModelUpdate>;

    public function Action(id:String, execution:String):void {
        this.id = id;
        this.execution = execution;
        this.access = "";
        this.updates = new Vector.<ModelUpdate>;
    }

    /**
     * Retrieves type of access to the action. User action can be accessed directly by user, while system
     * actions can be executed only by client.
     *
     * @return type of access to the action
     */
    public function getAccess():ActionAccess {
        return null;
    }

    ;

    public function getId():String {
        return id;
    }

    /**
     * Retrieves the type of action that will be executed.
     *
     * @return type of the action
     */
    public function getType():ActionType {
        return null;
    }

    public function getExecution():String {
        return execution;
    }

    ;

    /**
     * Retrieves block policy of the action.
     *
     * @return block policy of the action
     */
    public function getBlockPolicy():BlockPolicy {
        return null;
    }

    ;

    /**
     * Retrieves list of model updates on the client side.
     *
     * @return model updates that should occur on client side, if supported
     */
    public function getModelUpdate(i:Number):ModelUpdate {
        return updates[i];
    }

    ;

    public function addModelUpdate(modelUpdate:ModelUpdate):void {
        updates.push(modelUpdate);
    }

    ;

    public function toString():String {
        return id;
    }

}
}