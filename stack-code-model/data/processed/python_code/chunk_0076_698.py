package com.lessrain.project.controller {	import com.lessrain.project.view.utils.ObjectPrinter;	import com.lessrain.logger.LogManager;	import com.lessrain.project.view.components.Application;	import com.lessrain.puremvc.assets.model.AssetsProxy;	import com.lessrain.puremvc.assets.model.CopyProxy;	import com.lessrain.puremvc.assets.model.PropertiesProxy;	import com.lessrain.puremvc.assets.model.SWFAssetsProxy;	import com.lessrain.puremvc.assets.model.StyleSheetsProxy;	import com.lessrain.util.CallDelay;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	/**	 * @author torstenhartel	 */	public class AssetsParseCommand extends SimpleCommand {		override public function execute(notification_ : INotification) : void {						LogManager.debug("execute:: %s %s", notification_.getName(), notification_.getType());						if (notification_.getType() == AssetsProxy.TYPE_SUCCESS) {		 					sendNotification(CopyProxy.COPY_PARSE, 'copy');				sendNotification(PropertiesProxy.PROPERTIES_PARSE, 'properties');				sendNotification(StyleSheetsProxy.STYLE_SHEET_ADD, 'css');				sendNotification(SWFAssetsProxy.SWF_ASSET_PARSE, 'swfAssets');								// Add a delay here to avoid eliminated error messages due to massive use of try-catch blocks while loading all assets				CallDelay.call(					function() :void { 						sendNotification(StateMachine.ACTION, null, Application.ACTION_COMPLETE); 					}, 					50				);							} else {				CallDelay.call(					function() :void { 						throw new UninitializedError('Assets could not be loaded. notification_ '+ObjectPrinter.print(notification_));					}, 					50				);			}		}	}}