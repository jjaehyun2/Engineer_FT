/*	 __       _____   ____    ______      ______   __  __     /\ \     /\  __`\/\  _`\ /\__  _\    /\__  _\ /\ \/\ \    \ \ \    \ \ \/\ \ \,\L\_\/_/\ \/    \/_/\ \/ \ \ `\\ \    \ \ \  __\ \ \ \ \/_\__ \  \ \ \       \ \ \  \ \ , ` \    \ \ \L\ \\ \ \_\ \/\ \L\ \ \ \ \       \_\ \__\ \ \`\ \    \ \____/ \ \_____\ `\____\ \ \_\      /\_____\\ \_\ \_\    \/___/   \/_____/\/_____/  \/_/      \/_____/ \/_/\/_/	                                                          	                                                           ______  ____    ______  ______   _____   __  __  ____    ____     ____    ______   ____    ______   /\  _  \/\  _`\ /\__  _\/\__  _\ /\  __`\/\ \/\ \/\  _`\ /\  _`\  /\  _`\ /\__  _\ /\  _`\ /\__  _\  \ \ \L\ \ \ \/\_\/_/\ \/\/_/\ \/ \ \ \/\ \ \ `\\ \ \,\L\_\ \ \/\_\\ \ \L\ \/_/\ \/ \ \ \L\ \/_/\ \/   \ \  __ \ \ \/_/_ \ \ \   \ \ \  \ \ \ \ \ \ , ` \/_\__ \\ \ \/_/_\ \ ,  /  \ \ \  \ \ ,__/  \ \ \    \ \ \/\ \ \ \L\ \ \ \ \   \_\ \__\ \ \_\ \ \ \`\ \/\ \L\ \ \ \L\ \\ \ \\ \  \_\ \__\ \ \/    \ \ \    \ \_\ \_\ \____/  \ \_\  /\_____\\ \_____\ \_\ \_\ `\____\ \____/ \ \_\ \_\/\_____\\ \_\     \ \_\    \/_/\/_/\/___/    \/_/  \/_____/ \/_____/\/_/\/_/\/_____/\/___/   \/_/\/ /\/_____/ \/_/      \/_/    Copyright (c) 2008 Lost In Actionscript - Shane McCartneyPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.lia.documents {	import fl.controls.ComboBox;	import fl.controls.TextInput;	import com.flashdynamix.motion.Tweensy;	import com.flashdynamix.motion.effects.core.ColorEffect;	import com.flashdynamix.motion.effects.core.FilterEffect;	import com.flashdynamix.motion.layers.BitmapLayer;	import com.lia.motion.Bouncey;	import com.lia.utils.CappedObjectPool;	import com.lia.utils.QueuedObjectPool;	import com.lia.utils.SWFProfiler;	import com.lia.utils.SimpleObjectPool;	import flash.display.*;	import flash.events.*;	import flash.filters.BlurFilter;	import flash.geom.*;	import flash.text.TextField;	import flash.utils.*;	/**	 * @author shanem	 */	public class ObjectPoolDemo extends Sprite {		private const NOP : String = "nop";		private const SOP : String = "sop";		private const COP : String = "cop";		private const QOP : String = "qop";		public var typeDDL : ComboBox;		public var numTxtBx : TextInput;		public var minTxtBx : TextInput;		public var maxTxtBx : TextInput;		public var refreshTxtBx : TextInput;		public var timeTxtBx : TextField;		public var nextUpdateTxtBx : TextField;		public var infoTxtBx : TextField;		private var sop : SimpleObjectPool;		private var qop : QueuedObjectPool;		private var cop : CappedObjectPool;		private var tween : Tweensy;		private var scene : Sprite;		private var bouncey : Bouncey;		private var area : Rectangle;		private var Particle : Class;		private var current : String = NOP;		private var layer : BitmapLayer;		private var ct : ColorTransform;		private var pallette : Array = [0x00CCFF, 0x990066, 0x3366FF];		private var frame : int = 0;		private var maxSize : int = 500;		private var minSize : int = 100;		private var maxParticles : int = 1000;		private var currentTime : int;		private var delayTime : int = 2000;		public function ObjectPoolDemo() {			this.addEventListener(Event.ADDED_TO_STAGE, added);		}		private function added(e : Event) : void {			this.removeEventListener(Event.ADDED_TO_STAGE, added);						Particle = getDefinitionByName("Particle") as Class;			layer = new BitmapLayer(550, 400);						SWFProfiler.init(stage, this);			tween = new Tweensy();			scene = new Sprite();			bouncey = new Bouncey();						area = new Rectangle(0, 0, layer.width, layer.height);			ct = new ColorTransform();						layer.add(new FilterEffect(new BlurFilter(8, 8, 2)));			layer.add(new ColorEffect(new ColorTransform(1, 1, 1, 0.99, 5, -5, 0)));			layer.draw(scene);						this.addEventListener(Event.ENTER_FRAME, draw);						var time : int = getTimer();						addChildAt(layer, 0);						for(var i : int = 0;i < maxParticles; i++) add();						timeTxtBx.text = "Execution Time : " + (getTimer() - time) + " Milliseconds";						typeDDL.addEventListener(Event.CHANGE, onChange);			numTxtBx.addEventListener(Event.CHANGE, onChange);			minTxtBx.addEventListener(Event.CHANGE, onChange);			maxTxtBx.addEventListener(Event.CHANGE, onChange);			refreshTxtBx.addEventListener(Event.CHANGE, onChange);						refreshTxtBx.restrict = maxTxtBx.restrict = minTxtBx.restrict = numTxtBx.restrict = "0-9";						numTxtBx.text = maxParticles.toString();			minTxtBx.text = minSize.toString();			maxTxtBx.text = maxSize.toString();			refreshTxtBx.text = delayTime.toString();						maxTxtBx.enabled = minTxtBx.enabled = false;						currentTime = getTimer();		}		private function draw(e : Event) : void {			var timeLeft : int = Math.max(0, delayTime - (getTimer() - currentTime));			nextUpdateTxtBx.text = "Next Generation In : " + timeLeft.toString();			if(timeLeft <= 0) refresh();						switch(current) {				case NOP :					infoTxtBx.text = "";					break;				case SOP : 					infoTxtBx.text = "Pool size : " + sop.size.toString() + ", available items " + sop.length;					break;				case COP : 					infoTxtBx.text = "Pool size : " + cop.size.toString() + ", available items " + cop.length;					break;				case QOP : 					infoTxtBx.text = "Pool size : " + qop.size.toString() + ", available items " + qop.length + ", queue length " + qop.queued;					break;			}						if(current == QOP && Math.random() < 0.5 && qop.queued > 0) qop.add();		}		private function onChange(e : Event) : void {			remove();						switch(e.currentTarget) {				case typeDDL : 										switch(current) {						case SOP:							sop.dispose();							break;						case COP:							cop.dispose();							break;						case QOP:							qop.dispose();							break;					}										SWFProfiler.gc();										current = typeDDL.selectedItem["data"];										switch(current) {						case NOP :							maxTxtBx.enabled = minTxtBx.enabled = false;							break;						case SOP :							sop = new SimpleObjectPool(create, clean);							maxTxtBx.enabled = minTxtBx.enabled = false;							break;						case COP :							cop = new CappedObjectPool(create, clean, minSize, maxSize);							maxTxtBx.enabled = minTxtBx.enabled = true;							break;						case QOP :							qop = new QueuedObjectPool(create, clean, minSize, maxSize, onQueue, onTimeout);							maxTxtBx.enabled = minTxtBx.enabled = true;							break;					}										break;				case numTxtBx : 					maxParticles = Math.min(3000, Math.max(0, int(numTxtBx.text)));					break;				case minTxtBx : 										minSize = int(minTxtBx.text);					switch(current) {						case QOP :							qop.minSize = minSize;							break;						case COP :							cop.minSize = minSize;							break;					}										break;				case maxTxtBx : 										maxSize = int(maxTxtBx.text);					switch(current) {						case QOP :							qop.maxSize = maxSize;							break;						case COP :							cop.maxSize = maxSize;							break;					}										break;				case refreshTxtBx : 					delayTime = Math.max(250, int(refreshTxtBx.text));					break;			}						refresh();		}		private function refresh() : void {			remove();						currentTime = getTimer();						for(var i : int = 0;i < maxParticles; i++) add();						timeTxtBx.text = "Execution Time : " + (getTimer() - currentTime) + " Milliseconds";		}		private function remove() : void {			bouncey.empty();			var item : DisplayObject;						while(scene.numChildren) {				item = scene.getChildAt(0);				scene.removeChild(item);							switch(current) {					case SOP : 						sop.checkIn(item);						break;					case COP : 						cop.checkIn(item);						break;					case QOP : 						qop.checkIn(item);						break;				}			}		}		private function add() : void {			var item : DisplayObject;			switch(current) {				case NOP : 					item = create();					break;				case SOP : 					item = sop.checkOut();					break;				case COP : 					item = cop.checkOut();					break;				case QOP : 					item = qop.checkOut();					break;			}						if(item != null) setup(item);		}		private function setup(item : DisplayObject) : void {			frame++;						scene.addChild(item);						ct.color = pallette[frame % pallette.length];						item.transform.colorTransform = ct;			item.alpha = Math.random();			item.scaleX = item.scaleY = Math.random() * 0.2;			item.x = layer.width * Math.random();			item.y = layer.height * Math.random();						bouncey.add(item, area, 0, 0, -1 + Math.random() * 2, -2 + Math.random() * 4, 0.9);		}		private function create() : Sprite {			return new Particle();		}		private function clean(item : DisplayObject) : void {			//trace("clean : " + item);		}		private function onQueue(item : DisplayObject) : void {			//trace("on queue");			setup(item);		}		private function onTimeout() : void {			//trace("on timeout")		}	}}