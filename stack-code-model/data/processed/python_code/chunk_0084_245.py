/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * Tetragon : Game Engine for multi-platform ActionScript projects. * http://www.tetragonengine.com/ - Copyright (C) 2012 Sascha Balkau *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package tetragon.util.time{	import tetragon.core.signals.Signal;	import tetragon.core.types.IDisposable;	import tetragon.util.display.StageReference;	import flash.display.Stage;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		/**	 * Detects user inactivity by checking for a void in mouse movement and key presses.	 * You must first initialize StageReference before using this class.	 * 	 * @example	 * <pre>	 *	package	 *	{	 *		import flash.display.Sprite;	 *		import com.hexagonstar.time.Inactivity;	 *		import com.hexagonstar.display.StageReference;	 *			 *		public class Example extends Sprite	 *		{	 *			protected var _inactivity:Inactivity;	 *				 *			public function Example()	 *			{	 *				StageReference.stage = stage;	 *				// User should be considered inactive after 3 seconds:	 *				_inactivity = new Inactivity(3000);	 *				_inactivity.addEventListener(InactivityEvent.INACTIVE, onUserInactive);	 *				_inactivity.addEventListener(InactivityEvent.ACTIVE, onUserActive);	 *				_inactivity.start();	 *			}	 *				 *			public function onUserInactive(e:InactivityEvent):void	 *			{	 *				trace("User inactive for " + e.milliseconds + " milliseconds.");	 *			}	 *				 *			public function onUserActive(e:InactivityEvent):void	 *			{	 *				trace("User active after being inactive for " + e.milliseconds	 *				    + " milliseconds.");	 *			}	 *		}	 *	}	 * </pre>	 */	public final class Inactivity implements IDisposable	{		//-----------------------------------------------------------------------------------------
		// Properties
		//-----------------------------------------------------------------------------------------				private var _delay:uint;		private var _interval:Interval;		private var _stopwatch:Stopwatch;		private var _ignoreMouse:Boolean;		private var _autoRestart:Boolean;						//-----------------------------------------------------------------------------------------		// Signals		//-----------------------------------------------------------------------------------------				private var _inactivitySignal:Signal;		private var _activitySignal:Signal;						//-----------------------------------------------------------------------------------------
		// Constructor
		//-----------------------------------------------------------------------------------------				/**		 * Creates an Inactivity. You must first initialize StageReference before		 * using this class.		 * 		 * @param delay The time delay in milliseconds until a user is considered inactive.		 * @param ignoreMouse		 * @param autoRestart		 */		public function Inactivity(delay:uint = 5000, ignoreMouse:Boolean = false,			autoRestart:Boolean = false)		{			super();						this.delay = delay;			_ignoreMouse = ignoreMouse;			_autoRestart = autoRestart;			_stopwatch = new Stopwatch();		}						//-----------------------------------------------------------------------------------------
		// Public Methods
		//-----------------------------------------------------------------------------------------				/**		 * Starts watching for user inactivity.		 */		public function start():void		{			if (!_interval) _interval = Interval.setTimeOut(delay, onInactivity);			if (_interval.isRunning) return;						var stage:Stage = StageReference.stage;			stage.addEventListener(Event.RESIZE, onActivity);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onActivity);			stage.addEventListener(KeyboardEvent.KEY_UP, onActivity);						if (!_ignoreMouse)			{				stage.addEventListener(MouseEvent.MOUSE_DOWN, onActivity);				stage.addEventListener(MouseEvent.MOUSE_MOVE, onActivity);			}						_stopwatch.start();			_interval.start();		}						/**		 * Stops watching for user inactivity.		 */		public function stop():void 		{			if (!_interval) return;						_interval.reset();						var stage:Stage = StageReference.stage;			stage.removeEventListener(Event.RESIZE, onActivity);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, onActivity);			stage.removeEventListener(KeyboardEvent.KEY_UP, onActivity);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, onActivity);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onActivity);		}						/**		 * Resets the inactivity. Can be used to reset the inactivity to trigger inactivities		 * again after it was triggered before but without receiving any user input to cause		 * it become non-inactive before.
		 */
		public function reset():void
		{			if (!_interval) return;			var wasRunning:Boolean = _interval.isRunning;			_stopwatch.stop();			_interval.reset();			if (wasRunning) _interval.start();		}						/**		 * Restarts the inactivity if it was started before and has been stopped due to		 * triggering an inactivity state.
		 */
		public function restart():void
		{
			if (!_interval) return;			_stopwatch.stop();			_interval.reset();			_stopwatch.start();			_interval.start();		}						/**
		 * Let's you trigger user activity manually.
		 */
		public function triggerActivity():void
		{
			onActivity(null);
		}						/**		 * Disposes the object.		 */		public function dispose():void		{			stop();			_interval.dispose();		}						//-----------------------------------------------------------------------------------------
		// Accessors
		//-----------------------------------------------------------------------------------------				/**		 * The time delay in milliseconds until a user is considered inactive. The minimum		 * value for this is 1.		 * 		 * @default 5000		 */		public function get delay():uint		{			return _delay;		}		public function set delay(v:uint):void		{			if (v < 1) v = 1;			_delay = v;		}						/**		 * If set to true the Inactivity will ignore mouse interactions and only keyboard		 * events are registered to determine activity/inactivity. The default is false.		 * 		 * @default false		 */		public function get ignoreMouse():Boolean		{			return _ignoreMouse;		}		public function set ignoreMouse(v:Boolean):void		{			_ignoreMouse = v;		}						/**		 * @default false		 */		public function get autoRestart():Boolean		{			return _autoRestart;		}		public function set autoRestart(v:Boolean):void		{			_autoRestart = v;		}						/**		 * Dispatched whenever the inactivity state becomes inactive, i.e. after a defined		 * time no user input happened.		 * 		 * <p>The signal provides one value: The time a user has been inactive, in		 * milliseconds, so your signal listener must have one parameter of type Number.</p>		 */		public function get inactivitySignal():Signal		{			if (!_inactivitySignal) _inactivitySignal = new Signal();			return _inactivitySignal;		}						/**		 * Dispatched whenever the inactivity state becomes active, i.e. after the state was		 * inactive user input occured to interrupt the inactivity.		 * 		 * <p>The signal provides one value: The time a user has been inactive, in		 * milliseconds, so your signal listener must have one parameter of type Number.</p>		 */		public function get activitySignal():Signal		{			if (!_activitySignal) _activitySignal = new Signal();			return _activitySignal;		}						//-----------------------------------------------------------------------------------------
		// Event Handlers
		//-----------------------------------------------------------------------------------------				private function onInactivity():void		{			_interval.stop();			if (_inactivitySignal) _inactivitySignal.dispatch(_interval.delay);			_stopwatch.start();			if (_autoRestart) restart();		}						private function onActivity(e:Event):void 		{			if (!_interval.isRunning)			{				if (_activitySignal) _activitySignal.dispatch(_stopwatch.time + _interval.delay);				_stopwatch.stop();			}			restart();		}	}}