package com.lessrain.project.view {	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.view.components.Application;	import com.lessrain.project.view.components.Controls;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.events.Event;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class ControlsMediator extends Mediator {			public static const NAME: String = getQualifiedClassName(ControlsMediator);			public function ControlsMediator(controls_: Controls = null){			super(NAME, controls_);			controls.addEventListener(Controls.GRAB_MODE_ON, onGrabMode);			controls.addEventListener(Controls.GRAB_MODE_OFF, onGrabMode);			controls.addEventListener(Controls.PREVIEW_MODE_ON, onPreviewMode);			controls.addEventListener(Controls.PREVIEW_MODE_OFF, onPreviewMode);		}		private function onPreviewMode(event : Event) : void {			sendNotification(ApplicationFacade.PREVIEW_MODE, event.type == Controls.PREVIEW_MODE_ON);		}		private function onGrabMode(event : Event) : void {			sendNotification(ApplicationFacade.GRAB_MODE, event.type == Controls.GRAB_MODE_ON);		}			override public function listNotificationInterests(): Array {			var interests:Array = new Array();			interests.push(StateMachine.CHANGED);			interests.push(ApplicationFacade.EDITOR_READY);			interests.push(ApplicationFacade.GRAB_MODE);			interests.push(ApplicationFacade.PREVIEW_MODE);			interests.push(ApplicationFacade.GRAB_ENABLED);			interests.push(ApplicationFacade.PREVIEW_ENABLED);			return interests;		}				override public function handleNotification(notification_: INotification): void {			switch( notification_.getName()){				case StateMachine.CHANGED:         					if (notification_.getType()==Application.STATE_MAIN) {						controls.initialize();					}					break;				case ApplicationFacade.EDITOR_READY:						controls.showBanner();					break;				case ApplicationFacade.GRAB_MODE:						controls.grabMode = Boolean(notification_.getBody());					break;				case ApplicationFacade.PREVIEW_MODE:						controls.previewMode = Boolean(notification_.getBody());					break;				case ApplicationFacade.GRAB_ENABLED:						controls.grabEnabled = Boolean(notification_.getBody());					break;				case ApplicationFacade.PREVIEW_ENABLED:						controls.previewEnabled = Boolean(notification_.getBody());					break;			}		}				override public function onRegister(): void {					}				override public function onRemove(): void {				}		protected function get controls(): Controls {			return viewComponent as Controls;		}	}}