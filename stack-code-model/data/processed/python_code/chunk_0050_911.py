package flair.logging{	import flash.events.EventDispatcher;	import flash.system.Capabilities;	/**	 * @author SamYStudiO ( contact@samystudio.net )	 */	public class Logger extends EventDispatcher	{		/**		 * @private		 */		protected var _handlers : Vector.<IHandler> = new <IHandler>[];		/**		 *		 */		public static const DEFAULT_LOGGER : Logger = new Logger( Capabilities.isDebugger ? Level.ALL : Level.OFF , new TraceHandler() );		/**		 * @private		 */		protected var _level : Level;		/**		 * @inheritDoc		 */		public function get level() : Level		{			return _level;		}		public function set level( level : Level ) : void		{			_level = level || ( Capabilities.isDebugger ? Level.ALL : Level.OFF );		}		/**		 *		 */		public function Logger( level : Level , ...handlers : Array )		{			this.level = level || ( Capabilities.isDebugger ? Level.ALL : Level.OFF );			addHandlers.apply( this , handlers );		}		/**		 *		 */		public function addHandler( handler : IHandler ) : void		{			if( !handler || _handlers.indexOf( handler ) >= 0 ) return;			_handlers.push( handler );		}		/**		 *		 */		public function addHandlers( ...handlers : Array ) : void		{			for each( var handler : IHandler in handlers )			{				addHandler( handler );			}		}		/**		 *		 */		public function removeHandler( handler : IHandler ) : void		{			if( !handler ) return;			var index : int = _handlers.indexOf( handler );			if( index != -1 ) _handlers.removeAt( index );		}		/**		 *		 */		public function removeHandlers( ...handlers : Array ) : void		{			for each( var handler : IHandler in handlers )			{				removeHandler( handler );			}		}		/**		 *		 */		public function removeAllHandlers() : void		{			_handlers = new <IHandler>[];		}		/**		 *		 */		public function getHandlers() : Vector.<IHandler>		{			return _handlers.concat();		}		/**		 *		 */		public function log( level : Level , ...rest : Array ) : void		{			_log( new LogRecord( level , rest.join( " " ) ) );		}		/**		 *		 */		public function debug( ...rest : Array ) : void		{			_log( new LogRecord( Level.DEBUG , rest.join( " " ) ) );		}		/**		 *		 */		public function info( ...rest : Array ) : void		{			_log( new LogRecord( Level.INFO , rest.join( " " ) ) );		}		/**		 *		 */		public function warn( ...rest : Array ) : void		{			_log( new LogRecord( Level.WARN , rest.join( " " ) ) );		}		/**		 *		 */		public function error( ...rest : Array ) : void		{			_log( new LogRecord( Level.ERROR , rest.join( " " ) ) );		}		/**		 *		 */		public function fatal( ...rest : Array ) : void		{			_log( new LogRecord( Level.FATAL , rest.join( " " ) ) );		}		/**		 * @inheritDoc		 */		public function isLoggable( record : LogRecord ) : Boolean		{			return record.level.value >= level.value;		}		/**		 * @private		 */		protected function _log( record : LogRecord ) : void		{			if( isLoggable( record ) )			{				for each( var handler : IHandler in _handlers )				{					if( handler ) handler.publish( record );				}			}		}	}}