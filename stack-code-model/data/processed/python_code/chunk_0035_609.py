/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore {

import org.apache.thrift.Set;
import org.apache.thrift.type.BigInteger;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

import com.evernote.edam.notestore.NoteFilter;

  /**
   * A description of the thing for which we are searching for related
   * entities.
   * 
   * You must specify either <em>noteGuid</em> or <em>plainText</em>, but
   * not both. <em>filter</em> is optional.
   * 
   * <dl>
   * <dt>noteGuid</dt>
   * <dd>The GUID of an existing note in your account for which related
   *     entities will be found.</dd>
   * 
   * <dt>plainText</dt>
   * <dd>A string of plain text for which to find related entities.
   *     You should provide a text block with a number of characters between
   *     EDAM_RELATED_PLAINTEXT_LEN_MIN and EDAM_RELATED_PLAINTEXT_LEN_MAX.
   *     </dd>
   * 
   * <dt>filter</dt>
   * <dd>The list of criteria that will constrain the notes being considered
   *     related.
   *     Please note that some of the parameters may be ignored, such as
   *     <em>order</em> and <em>ascending</em>.
   * </dd>
   * </dl>
   */
  public class RelatedQuery implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("RelatedQuery");
    private static const NOTE_GUID_FIELD_DESC:TField = new TField("noteGuid", TType.STRING, 1);
    private static const PLAIN_TEXT_FIELD_DESC:TField = new TField("plainText", TType.STRING, 2);
    private static const FILTER_FIELD_DESC:TField = new TField("filter", TType.STRUCT, 3);

    private var _noteGuid:String;
    public static const NOTEGUID:int = 1;
    private var _plainText:String;
    public static const PLAINTEXT:int = 2;
    private var _filter:NoteFilter;
    public static const FILTER:int = 3;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[NOTEGUID] = new FieldMetaData("noteGuid", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[PLAINTEXT] = new FieldMetaData("plainText", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[FILTER] = new FieldMetaData("filter", TFieldRequirementType.OPTIONAL, 
          new StructMetaData(TType.STRUCT, NoteFilter));
    }
    {
      FieldMetaData.addStructMetaDataMap(RelatedQuery, metaDataMap);
    }

    public function RelatedQuery() {
    }

    public function get noteGuid():String {
      return this._noteGuid;
    }

    public function set noteGuid(noteGuid:String):void {
      this._noteGuid = noteGuid;
    }

    public function unsetNoteGuid():void {
      this.noteGuid = null;
    }

    // Returns true if field noteGuid is set (has been assigned a value) and false otherwise
    public function isSetNoteGuid():Boolean {
      return this.noteGuid != null;
    }

    public function get plainText():String {
      return this._plainText;
    }

    public function set plainText(plainText:String):void {
      this._plainText = plainText;
    }

    public function unsetPlainText():void {
      this.plainText = null;
    }

    // Returns true if field plainText is set (has been assigned a value) and false otherwise
    public function isSetPlainText():Boolean {
      return this.plainText != null;
    }

    public function get filter():NoteFilter {
      return this._filter;
    }

    public function set filter(filter:NoteFilter):void {
      this._filter = filter;
    }

    public function unsetFilter():void {
      this.filter = null;
    }

    // Returns true if field filter is set (has been assigned a value) and false otherwise
    public function isSetFilter():Boolean {
      return this.filter != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case NOTEGUID:
        if (value == null) {
          unsetNoteGuid();
        } else {
          this.noteGuid = value;
        }
        break;

      case PLAINTEXT:
        if (value == null) {
          unsetPlainText();
        } else {
          this.plainText = value;
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          this.filter = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case NOTEGUID:
        return this.noteGuid;
      case PLAINTEXT:
        return this.plainText;
      case FILTER:
        return this.filter;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case NOTEGUID:
        return isSetNoteGuid();
      case PLAINTEXT:
        return isSetPlainText();
      case FILTER:
        return isSetFilter();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case NOTEGUID:
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PLAINTEXT:
            if (field.type == TType.STRING) {
              this.plainText = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FILTER:
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.noteGuid != null) {
        if (isSetNoteGuid()) {
          oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
          oprot.writeString(this.noteGuid);
          oprot.writeFieldEnd();
        }
      }
      if (this.plainText != null) {
        if (isSetPlainText()) {
          oprot.writeFieldBegin(PLAIN_TEXT_FIELD_DESC);
          oprot.writeString(this.plainText);
          oprot.writeFieldEnd();
        }
      }
      if (this.filter != null) {
        if (isSetFilter()) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          this.filter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("RelatedQuery(");
      var first:Boolean = true;

      if (isSetNoteGuid()) {
        ret += "noteGuid:";
        if (this.noteGuid == null) {
          ret += "null";
        } else {
          ret += this.noteGuid;
        }
        first = false;
      }
      if (isSetPlainText()) {
        if (!first) ret +=  ", ";
        ret += "plainText:";
        if (this.plainText == null) {
          ret += "null";
        } else {
          ret += this.plainText;
        }
        first = false;
      }
      if (isSetFilter()) {
        if (!first) ret +=  ", ";
        ret += "filter:";
        if (this.filter == null) {
          ret += "null";
        } else {
          ret += this.filter;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}