/**
* CHANGELOG:
*
* <ul>
* <li><b>1.0</b> - 2012-07-25 15:35</li>
*	<ul>
*		<li>Create file</li>
*	</ul>
* </ul>
* @author Piotr Paczkowski - kontakt@trzeci.eu
*/
package pl.asria.tools.data 
{
	import flash.errors.IllegalOperationError;
	import flash.utils.describeType;
	import flash.utils.Dictionary;
	
	public class VirtualClass 
	{
		private static var __valided:Dictionary = new Dictionary(false);
		/**
		 * VirtualClass - Some kind of Virtual Class in normal Objective language. Vitrual property over method is generated by [Virtual(prefix="_")] metatag. perfix is required parameter. 
		 * If we declarate [Virtual(prefix="_")] above "_init" function, then validator is checking that in class definition is defined method called "init"
		 * @usage - 
		 * @version - 1.0
		 * @author - Piotr Paczkowski - kontakt@trzeci.eu
		 */
		public function VirtualClass() 
		{
			if (__valided[(this as Object).constructor] !== true)
			{
				__validateOverXML();
			}
		}
		
		private function __validateOverXML():void 
		{
			var description:XML = describeType(this);
			var requiredMethods:Array = [];
			for each (var item:XML in description.method) 
			{
				var dirty:Boolean = false;
				var virtual:XMLList = new XMLList();
				for each (var virtualDefinition:XML in item.metadata.(@name == "Virtual")) 
				{
					for each (var args:XML in virtualDefinition.arg) 
					{
						if (args.@key == "prefix")
						{
							var _prefix:String = args.@value;
							requiredMethods.push(String(item.@name).split(_prefix)[1]);
							dirty = true;
						}
						if (dirty) continue;
					}
					if (dirty) continue;
				}
			}
			
			// validate existing virtual methods
			var unvalidMethods:Array = [];
			for (var i:int = 0, i_max:int = requiredMethods.length; i < i_max; i++) 
			{
				if (description.method.(@name == requiredMethods[i]).length() == 0)
				{
					unvalidMethods.push(requiredMethods[i]);
				}
			}
			if (unvalidMethods.length) throw new IllegalOperationError("Missing methods:'"+unvalidMethods+"' in '"+description.@name+"' definition.")
			else __valided[(this as Object).constructor] = true;
		}
	}

}