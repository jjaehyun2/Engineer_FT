package com.mcleodgaming.elevator.events{	import com.mcleodgaming.elevator.util.*;	public class EventDispatcher	{		public static var debug:Boolean = false;		public static var dispatcher:EventDispatcher = null;		public static function init():void {			EventDispatcher.dispatcher = new EventDispatcher();		}		public var _eventList:Object; //Dictionary of events in the format: {type1: [ {listener}, {listener}], type2: [{listener}, {listener}]}		public function EventDispatcher():void {			_eventList = {};		}		public function addEventListener(type:String, listener:Function):void {			if(typeof listener != 'function')				throw new Error("[EventDispatcher] Error, provided event listener is not a function");			//Save the event under its name in our eventList Dictionary			if(!_eventList[type])				_eventList[type] = new Array();			_eventList[type].push({ listener: listener});		}		public function removeEventListener(type:String, listener:Function = null):void {			//Check our event list for listeners of this type, and remove			if(_eventList[type]) {				for(var i = 0; i < _eventList[type].length; i++)					if(!listener || listener == _eventList[type][i].listener)						_eventList[type].splice(i--, 1);				//Could delete events of the this type if there are none left, but not necessary since it can be reused (and would probably break removeAllEvents() anyway)				/*if(_eventList[type].length <= 0) {					//Delete this listener type from the dictionar					_eventList[type] = null;					delete _eventList[type];				}*/			}		}		public function dispatchEvent(event:Event):void {			//Trigger all event of this type			if(_eventList[event.type]) {				for(var i = 0; i < _eventList[event.type].length; i++)					_eventList[event.type][i].listener(event);			}			if(EventDispatcher.debug)				Debug.log("[Event \"" + event.type + "\"]");		}		public function hasEvent(type:String, listener:Function = null):Boolean {			//Determine if an event exists (can filter by listener)			if(_eventList[type]) {				for(var i = 0; i < _eventList[type].length; i++)					if(!listener || listener == _eventList[type][i].listener)						return true;			}			return false;		}		public function removeAllEvents():void {			//Remove all events			for(var i in _eventList) {				removeEventListener(i);				_eventList[i] = null;			}			_eventList = null;			_eventList = {};		}		public function getCount(type:String = null):int {			if(!type) {				//Total all events				var total = 0;				for(var i in _eventList)					total += _eventList[i].length;				return total;			} else {				//Total events of a specific type				return (_eventList[type]) ? _eventList[type].length : 0;			}		}	}}