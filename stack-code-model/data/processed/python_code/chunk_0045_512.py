/* *      _________  __      __ *    _/        / / /____ / /________ ____ ____  ___ *   _/        / / __/ -_) __/ __/ _ `/ _ `/ _ \/ _ \ *  _/________/  \__/\__/\__/_/  \_,_/\_, /\___/_//_/ *                                   /___/ *  * Tetragon : Game Engine for multi-platform ActionScript projects. * http://www.tetragonengine.com/ - Copyright (C) 2012 Sascha Balkau *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package tetragon.core.file.types{	import tetragon.core.signals.Signal;	import flash.utils.ByteArray;			/**	 * IFile is the base interface for all file type classes. File type classes can be	 * used to load files of a specific type from disk or network and manage these in a	 * unified way.<br>	 * 	 * <p>File objects that implement <code>IFile</code> can be used with any of the	 * hexagonlib file loaders like the <code>BulkLoader</code> or the	 * <code>ZipLoader</code>. They store information about the physical file as well as	 * it's content data after it has been loaded.</p><br>	 * 	 * <p>Every file type class provides a content property that returns the file's	 * content typed in an object type specific to the file type class, for example the	 * <code>BinaryFile</code>'s <code>contentAsBytes</code> property returns a	 * <code>ByteArray</code> while the <code>TextFile</code>'s	 * <code>contentAsString</code> property returns a <code>String</code>.</p> <p>To	 * provide a common content property, every file type class also allows to access the	 * file's content data with an untyped proptery named <code>content</code> which	 * simply delegates the class' specific content property. For example The content	 * property of the <code>BinaryFile</code> would still return a <code>ByteArray</code>	 * and the <code>TextFile</code>'s content property would still return a	 * <code>String</code>, only with the difference that the property's return type is	 * untyped.</p> <p>Additionally most file type classes also implement the	 * <code>contentAsBytes</code> property so their content can be obtained as a	 * <code>ByteArray</code> regardless of their default type.</p><br>	 * 	 * <p>After loading a file you can use the <code>valid</code> and <code>status</code>	 * properties to check if the file has been loaded and it's data has been parsed	 * successfully. Note that the <code>valid</code> property returns <code>false</code>	 * as long as no data has been loaded. The <code>status</code> property returns the	 * error text in case the file could not be loaded or parsed.</p>	 * 	 * @see com.hexagonstar.file.types.BinaryFile	 * @see com.hexagonstar.file.types.ImageFile	 * @see com.hexagonstar.file.types.SoundFile	 * @see com.hexagonstar.file.types.SWFFile	 * @see com.hexagonstar.file.types.TextFile	 * @see com.hexagonstar.file.types.XMLFile	 * @see com.hexagonstar.file.types.ZipFile	 */	public interface IFile	{		//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a string representation of the file.		 * 		 * @return A string representation of the file.		 */		function toString():String;						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The path of the file.		 */		function get path():String;		function set path(v:String):void;				/**		 * The ID of the file. The ID can be used optionally to identify a file.		 */		function get id():String;		function set id(v:String):void;						/**		 * The file's priority. This can be used to load files in order of their priority.		 * A file with a higher priority value has load precendence over files with a		 * lower value. <p>File priorities can be positive or negative but they cannot		 * exceed <code>int.MIN_VALUE</code> and <code>int.MAX_VALUE</code>. The default		 * value is 0.</p>		 */		function get priority():Number;		function set priority(v:Number):void;						/**		 * The file's weight. This is an optional value that can be used for weigthed		 * loading of files with the BulkLoader class.<br>		 * 		 * <p>File weights can be used to achieve a better load progress report if many		 * files are loaded in a bulk that vary a lot in size and where the load progress		 * calculated by the files' available bytes or by the load ratio would be		 * skewed.</p> <p>The weight values are an approximation for the files sizes and		 * need to be set proportionally between the files in the bulk to work		 * properly.</p><br>		 * 		 * <p>After weight values are set for a bulk of files you can use the		 * <code>weightPercent</code> property of a BulkFileIOEvent to receive a balanced		 * load progress report.</p><br>		 * 		 * <p>The weight is a value between 1 and <code>uint.MAX_VALUE</code>. The default		 * value is 1.</p>		 * 		 * @see com.hexagonstar.io.file.BulkLoader		 * @see com.hexagonstar.event.BulkFileIOEvent		 */		function get weight():uint;		function set weight(v:uint):void;						/**		 * An optional callback method that can be associated with the file.		 */		function get callback():Function;		function set callback(v:Function):void;						/**		 * An optional array of parameters that can be associated with the file.		 */		function get params():Array;		function set params(v:Array):void;						/**		 * The size of loaded bytes of the file.		 */		function get bytesLoaded():Number;		function set bytesLoaded(v:Number):void;						/**		 * The size of total bytes of the file.		 */		function get bytesTotal():Number;		function set bytesTotal(v:Number):void;						/**		 * The file's load progress in percent.		 */		function get percentLoaded():Number;						/**		 * Determines whether the file's content is valid or not. This property is		 * <code>false</code> unless data has been loaded and parsed successfully into the		 * file.		 */		function get valid():Boolean;						/**		 * Determines the file's status. After the file object has been created the status		 * is <code>Status.INIT</code> and after the file has been loaded and it's data		 * content is available the status is <code>Status.OK</code>. If any error occured		 * during loading or content parsing, the status contains the error message.		 * 		 * @see com.hexagonstar.data.constants.Status		 */		function get status():String;						/**		 * The file's HTTPStatus.		 */		function get httpStatus():int;		function set httpStatus(v:int):void;						/**		 * A more verbose HTTPStatus info if available.		 */		function get httpStatusInfo():String;						/**		 * The file's error message, if any.		 */		function get errorMessage():String;		function set errorMessage(v:String):void;						/**		 * The file's content data, returned in untyped format.		 */		function get content():*;		function set content(v:*):void;						/**		 * The file's content data, as a ByteArray. NOTE: This property might not be		 * implemented by all file type classes.		 */		function get contentAsBytes():ByteArray;		function set contentAsBytes(v:ByteArray):void;						/**		 * The file type ID.		 * 		 * @see com.hexagonstar.file.types.FileTypeIndex		 */		function get fileTypeID():int;						/**		 * Dispatched after the file's content has been loaded. This signal is always		 * broadcasted after the file finished loading, regardless whether it's content data		 * could be parsed sucessfully or not. Use the <code>valid</code> property after the		 * file has been loaded to check if the content is available and valid.		 */		function get completeSignal():Signal;	}}