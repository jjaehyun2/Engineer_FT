package src.game{	import net.fpp.common.starling.StaticAssetManager;	import rv2.sound.SoundHandler;	import src.common.DataManager;	import src.data.LevelEndVO;	import src.game.events.GameGuiEvent;	import src.game.module.help.HelpModule;	import src.game.module.notification.NotificationModule;	import starling.display.Button;	import starling.display.Sprite;	import starling.events.Event;	public class GameGui extends Sprite	{		private var _pausePanel:PausePanel;		private var _startGamePanel:StartGamePanel;		private var _gameOverPanel:GameOverPanel;		private var _notificationModule:NotificationModule;		private var _forceExitCallback:Function;		private var _coinGuiView:CoinGuiView;		private var _timeGuiView:TimeGuiView;		private var _helpModule:HelpModule;		private var _pauseButton:Button;		private var _levelID:uint;		private var _worldId:uint;		public function GameGui( levelID:uint, worldID:uint ):void		{			_levelID = levelID;			_worldId = worldID;			addEventListener( Event.ADDED_TO_STAGE, loaded );		}		private function loaded( event:Event ):void		{			removeEventListener( Event.ADDED_TO_STAGE, loaded );			addCoinGuiView();			addTimeGuiView();			addNotificationModule();			addChild( _pauseButton = new Button( StaticAssetManager.instance.getTexture( "pause_button" ) ) );			_pauseButton.x = stage.stageWidth - _pauseButton.width - 5;			_pauseButton.y = 5;			_pauseButton.addEventListener( Event.TRIGGERED, pauseRequest );			addChild( _pausePanel = new PausePanel );			_pausePanel.addEventListener( GameGuiEvent.RESUME_REQUEST, resumeRequest );			_pausePanel.addEventListener( GameGuiEvent.INGAME_RESTART_REQUEST, restartRequest );			_pausePanel.addEventListener( GameGuiEvent.GAME_END_REQUEST, exitRequest );			_pausePanel.visible = false;			if( _levelID == 0 && DataManager.getShowHelpState() && !DataManager.getHelpDatas()[ _worldId ] )			{				addHelpModule();			}		}		protected function addCoinGuiView():void		{			addChild( _coinGuiView = new CoinGuiView );			_coinGuiView.x = 5;			_coinGuiView.y = 5;		}		protected function addTimeGuiView():void		{			addChild( _timeGuiView = new TimeGuiView );			_timeGuiView.x = stage.stageWidth / 2 - _timeGuiView.width / 2;			_timeGuiView.y = 5;		}		private function addNotificationModule():void		{			this._notificationModule = new NotificationModule()			this.addChild( this._notificationModule.getView() );		}		private function addHelpModule():void		{			this._helpModule = new HelpModule( this._worldId, resumeRequest );			this.addChild( this._helpModule.getView() );			this.dispatchEvent( new GameGuiEvent( GameGuiEvent.PAUSE_REQUEST ) );		}		private function disposeHelpModule():void		{			if( this._helpModule )			{				this._helpModule.dispose();				this._helpModule = null;			}		}		public function addNotification( type:String ):void		{			_notificationModule.add( type );		}		public function updateCoinCount( count:uint ):void		{			_coinGuiView.updateValue( count );		}		public function updateTime( time:Number ):void		{			_timeGuiView.updateValue( time );		}		public function showStartGamePanel( onExitCallback:Function ):void		{			_forceExitCallback = onExitCallback;			disposeStartGamePanel();			addChild( _startGamePanel = new StartGamePanel( _levelID, _worldId ) );			_startGamePanel.addEventListener( GameGuiEvent.RESUME_REQUEST, resumeRequest );			_startGamePanel.addEventListener( GameGuiEvent.GAME_END_REQUEST, _forceExitCallback );			if( _helpModule )			{				_startGamePanel.visible = false;			}		}		public function disposeStartGamePanel():void		{			if( _startGamePanel )			{				_startGamePanel.removeEventListener( GameGuiEvent.RESUME_REQUEST, resumeRequest );				_startGamePanel.removeEventListener( GameGuiEvent.GAME_END_REQUEST, _forceExitCallback );				_startGamePanel.removeFromParent( true );				_startGamePanel = null;			}		}		public function showGameOverPanel( levelEndVO:LevelEndVO, onExitCallback:Function ):void		{			_forceExitCallback = onExitCallback;			disposeGameOverPanel();			addChild( _gameOverPanel = new GameOverPanel( levelEndVO ) );			_gameOverPanel.addEventListener( GameGuiEvent.INGAME_RESTART_REQUEST, restartRequest );			_gameOverPanel.addEventListener( GameGuiEvent.GAME_END_REQUEST, _forceExitCallback );			_gameOverPanel.addEventListener( GameGuiEvent.NEXT_LEVEL_REQUEST, nextLevelRequest );		}		public function disposeGameOverPanel():void		{			if( _gameOverPanel )			{				_gameOverPanel.removeEventListener( GameGuiEvent.INGAME_RESTART_REQUEST, restartRequest );				_gameOverPanel.removeEventListener( GameGuiEvent.GAME_END_REQUEST, _forceExitCallback );				_gameOverPanel.removeEventListener( GameGuiEvent.NEXT_LEVEL_REQUEST, nextLevelRequest );				_gameOverPanel.removeFromParent( true );				_gameOverPanel = null;			}		}		public function disable():void		{			this._pauseButton.enabled = false;		}		public function enable():void		{			this._pauseButton.enabled = true;		}		private function restartRequest( event:Event ):void		{			SoundHandler.stopAll();			disposeGameOverPanel();			_pausePanel.visible = false;			_pausePanel.enableButtons();			dispatchEvent( new GameGuiEvent( GameGuiEvent.INGAME_RESTART_REQUEST ) );		}		private function nextLevelRequest( event:Event ):void		{			SoundHandler.stopAll();			dispatchEvent( new GameGuiEvent( GameGuiEvent.NEXT_LEVEL_REQUEST ) );		}		private function pauseRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			_pausePanel.visible = true;			dispatchEvent( new GameGuiEvent( GameGuiEvent.PAUSE_REQUEST ) );		}		private function resumeRequest( event:Event ):void		{			if( _helpModule && _startGamePanel )			{				_startGamePanel.visible = true;				disposeHelpModule();				return;			}			else if( _startGamePanel )			{				disposeStartGamePanel();			}			_pausePanel.visible = false;			dispatchEvent( new GameGuiEvent( GameGuiEvent.RESUME_REQUEST ) );		}		private function exitRequest( event:Event ):void		{			SoundHandler.stopAll();			SoundHandler.play( 'SND_BUTTON' );			dispatchEvent( new GameGuiEvent( GameGuiEvent.GAME_END_REQUEST ) );		}		override public function dispose():void		{			_pauseButton.removeEventListener( Event.TRIGGERED, pauseRequest );			_pauseButton.removeFromParent( true );			_pauseButton = null;			_pausePanel.removeFromParent( true );			_pausePanel.removeEventListener( GameGuiEvent.RESUME_REQUEST, resumeRequest );			_pausePanel.removeEventListener( GameGuiEvent.INGAME_RESTART_REQUEST, restartRequest );			_pausePanel.removeEventListener( GameGuiEvent.GAME_END_REQUEST, exitRequest );			_pausePanel = null;			_timeGuiView.removeFromParent( true );			_timeGuiView = null;			_coinGuiView.removeFromParent( true );			_coinGuiView = null;			this._notificationModule.dispose();			this._notificationModule = null;			disposeStartGamePanel();			disposeGameOverPanel();			disposeHelpModule();			super.dispose();		}	}}