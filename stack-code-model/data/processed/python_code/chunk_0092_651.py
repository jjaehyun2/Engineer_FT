/* * Licensed under the MIT License *  * Copyright (c) 2010 Specialmoves Ltd *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * http://github.com/specialmoves/FluorineConnection * http://www.opensource.org/licenses/mit-license.php */package com.specialmoves.remoting.fluorine {	/**	 * This class takes an error created by .NET and parses it into a more structured data object.	 * 	 * @author mattbilson 22 Jan 2010	 * @version 3.0	 */	public class FluorineError {		public var details:String;		public var level:String;		public var description:String;		public var code:String;		public var type:String;				/**		 * The constructor takes a generic object returned by .NET and pulls out all the various properties		 * 		 * @param e The object returned by a failed FluorineConnection call		 */ 		public function FluorineError(e:Object) {			details = e['details'];			level = e['level'];			description = e['description'];			code = e['code'];			type = e['type'];			}				/**		 * Formats this error object into a readable string to output.		 * @return formatted string summarising the error		 */		public function toString():String {			return level.toUpperCase() + " (type:"+type+", code:"+code+")<br/>\t\t\t" + details + " : <br/>\t\t\t'" +description+"'";			}			}}