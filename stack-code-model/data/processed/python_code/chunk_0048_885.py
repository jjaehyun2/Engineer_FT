/*Copyright (c) 2005 JSON.orgPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The Software shall be used for Good, not Evil.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.*//*Ported to Actionscript 25 August 2015 by EnderMetrics <info@endermetrics.com>,wwww.endermetrics.comUSAGE:          */import JSON;class EnderMetrics {	var json = null;	var em_debug = true;	var em_track = true;	var em_domain:String = 'http://api.endermetrics.com/';	var api_version:String = 'v1';	var em_url = '';		var app_token:String = '';	var session_token:String = '';	//Account	var account_id:String = '';	var child_list:Array = [];	//Child	var child_id:String = '';	var child_nick:String = '' ;	var child_birthdate:String = '';	var child_gender:String = '';	//Report	var report:Array = [];	/*-- SET VARS --*/	var em_set:Object=null;					/*var initTime = nil;	var level = nil;	em.hits = {};	em.activityToken=nil;*/	function getAccountId(){		return account_id;	}	function init(token){ //Jacobo		trace('EnderMetrics INIT');		app_token = token;		trace('token:'+app_token);		em_url = em_domain+api_version;		trace('url: '+em_url);		json = new JSON();	}	/*ACCOUNT*///Jacobo	function account_register(custom_id:String, callback:Function){ 		trace('Account account_register');		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';    	if(custom_id){request.params = '{"app_token":"'+app_token+'", "custom_id":"'+custom_id+'"}';}    	else{request.params = '{"app_token":"'+app_token+'"}';}		response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					j=j.substr(21,j.length-45);										var o = json.parse(j);					if(o.meta.code==200){						trace('Account registered');						account_id=o.meta.data.account_id;						trace('account_id: '+account_id);						callback.call(null, account_id);					}else{						trace('Account not registered');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/account/register" , response, "POST");	}	function get_id(){}	function auth(aid:String, cid:String, callback:Function){		trace('Account auth');		account_id=aid;		child_id=cid;		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';    	request.params = '{"app_token":"'+app_token+'", "account_id":"'+account_id+'", "child_id":"'+child_id+'"}';		response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					trace(j);					j=j.substr(21,j.length-45);										var o = json.parse(j);					if(o.meta.code==200){						trace('Auth done');						session_token=o.session_token;						trace('session_token: '+session_token);						callback.call(null, session_token);					}else{						trace('ERROR: Account not authenticated');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/auth/token" , response, "POST");	}	/*CHILD*/	function child_register(nick, birthdate, gender, callback){		trace('CHILD REGISTER');		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';		child_nick = nick;		child_birthdate = birthdate;		child_gender = gender;		request.params = '{"nick":"'+nick+'", "birthdate":"'+birthdate+'", "gender":"'+gender+'", "account_id":"'+account_id+'"}'; //2c4db7197a98d6c83998eec5f5f71d43    			trace(child_nick);		trace(child_birthdate);		trace(child_gender);		//local params = {["nick"] = nick, ["birthdate"]= birthdate, ["gender"]= gender}		response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					j=j.substr(21,j.length-45);					trace('j:'+j);					var o = json.parse(j);					//trace(unescape(this.toString().substr(0,this.toString().length-30)));										//var o=json.parse((this.toString().substr(0,this.toString().length-30)));					trace('code: '+o);					if(o.meta.code==200){						trace('Child registered');						child_id=o.data.child_id;						trace(child_id);						callback();					}else{						trace('Child not registered');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/child/register/" , response, "POST");	}	function get_child(){		trace(child_id)		return child_id;	}	function get_all(account, callback){		trace("Get all children"); 		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';		request.params = '{"account_id":"'+account+'"}'; //2c4db7197a98d6c83998eec5f5f71d43    			response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					j=j.substr(21,j.length-45);					trace('j:'+j);					var o = json.parse(j);										trace('code: '+o);					if(o.meta.code==200){						trace('List obtained');												child_list=o.data.list;												for( var prop:String in child_list)	{						    trace( prop +" = " +child_list[prop] );						    for(var p: String in child_list[prop]){						    	trace(p+"="+child_list[prop][p]);						    }						}						callback();					}else{						trace('List not obtained');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/child/getall/" , response, "POST");	}	/*SET*/	function init_set(activityToken:String, sessionToken:String, level:Number){		session_token=sessionToken;		trace('Init SET');		em_set=new EmSet();		em_set.init(activityToken, level);		//printSet();			}	function add_hit(stoken, result){		em_set.addHit(stoken, result);	}	function track_set(r, callback){		trace('End SET: '+r);		em_set.end(r);		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';    	request.params = '{"session_token":"'+session_token+'", "data":'+em_set.toJson()+'}';    	trace('params: '+request.params);		response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					trace(j);					j=j.substr(21,j.length-45);										var o = json.parse(j);					if(o.meta.code==200){						trace('Set tracked');						callback.call(null);					}else{						trace('ERROR: Set couldn\'t be tracked');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/track/set" , response, "POST");	}	function printSet(){		trace('Activity token: '+em_set.getActivityToken());		trace('init Time: '+em_set.getInitTime());		trace('Level: '+em_set.getLevel());		trace('Num hits: '+em_set.getHits().length);		trace('HITS:');		trace(em_set.toJson());	}	/*REPORT*/	function child_report(child_id, callback){		trace("Child report");		var request:LoadVars = new LoadVars();		var response:LoadVars = new LoadVars();    	request.format = 'json';    	request.params = '{"app_token":"'+app_token+'","account_id":"2c4db7197a98d6c83998eec5f5f71d43","child_id":"'+child_id+'"}'; 		//account_id: 2c4db7197a98d6c83998eec5f5f71d43		//child_id: de4f7a56fd3ee9074bd368d310ae5f21		//app_token: 2f3524d964c40282819b3e8f011f55d9		response.onLoad = function(success:Boolean) { 			trace('response');			if (success) {				try {					json = new JSON();					var j = unescape(this.toString());					j=j.substr(21,j.length-45);					trace('j:'+j);					var o = json.parse(j);										trace('code: '+o);					if(o.meta.code==200){						trace('List obtained');												report=o.data.activities;												for( var prop:String in report)	{						    trace( prop +" = " +report[prop] );						    for(var p: String in report[prop]){						    	trace(p+"="+report[prop][p]);						    }						}						callback(report);					}else{						trace('List not obtained');					}				} catch (ex) {					trace(ex.name+":"+ex.message+":"+ex.at+":"+ex.text);				}			} else { 				trace("Error connecting to server."); 			} 		}; 				request.sendAndLoad(em_url+"/child/report/" , response, "POST");	}	function setIsDebug(boolean){		trace("Is debug: "+boolean)		em_debug = boolean;	}	function setStopTracking(boolean){		trace("Stop tracking: "+boolean)		em_debug = boolean;	}}