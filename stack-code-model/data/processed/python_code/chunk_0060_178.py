package com.segonquart{	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.Strong;	import flash.display.*;	import flash.utils.Timer;	import flash.events.*;	public class Flip extends Sprite	{		private var firstView:DisplayObject;		private var secondView:DisplayObject;		private var initFromSide:String;		private var duration:int;		private var flipTween:Tween;		private var addSecondView:Boolean;		private var added:Boolean = false;		private var timer:Timer = new Timer(1);		public function Flip (frontObject:DisplayObject, backObject:DisplayObject, timeInSeconds:int, flipFromSide:String, secondViewIsInLibrary:Boolean):void		{			firstView = frontObject;			secondView = backObject;			duration = timeInSeconds;			initFromSide = flipFromSide;			addSecondView = secondViewIsInLibrary;			animateFirstView ();			timer.addEventListener (TimerEvent.TIMER, checkFlip);		}		private function animateFirstView ():void		{			flipTween = new Tween(firstView,"scaleX",Strong.easeIn,1,0.5,duration / 2,true);			flipTween = new Tween(firstView,"scaleY",Strong.easeIn,1,0.5,duration / 2,true);			if (initFromSide == "left")			{				flipTween = new Tween(firstView,"rotationY",Strong.easeIn,0,90,duration / 2,true);				timer.start ();			}			else if (initFromSide == "right")			{				flipTween = new Tween(firstView,"rotationY",Strong.easeIn,0,-90,duration / 2,true);				timer.start ();			}		}		private function checkFlip (e:TimerEvent):void		{			if (initFromSide == "left" && firstView.rotationY >= 90)			{				timer.stop ();				firstView.visible = false;				if (addSecondView && ! added)				{					secondView.x = firstView.x;					secondView.y = firstView.y;					addChild (secondView);					added = true;				}				else				{					secondView.x = firstView.x;					secondView.y = firstView.y;				}				animateSecondView ();			}			else if (initFromSide == "right" && firstView.rotationY <= -90)			{				timer.stop ();				firstView.visible = false;				if (addSecondView && ! added)				{					secondView.x = firstView.x;					secondView.y = firstView.y;					addChild (secondView);					added = true;				}				else				{					secondView.x = firstView.x;					secondView.y = firstView.y;				}				animateSecondView ();			}		}		private function animateSecondView ():void		{			flipTween = new Tween(secondView,"scaleX",Strong.easeOut,0.5,1,duration / 2,true);			flipTween = new Tween(secondView,"scaleY",Strong.easeOut,0.5,1,duration / 2,true);			if (initFromSide == "left")			{				flipTween = new Tween(secondView,"rotationY",Strong.easeOut,-90,0,duration / 2,true);				firstView.visible = true;			}			else if (initFromSide == "right")			{				flipTween = new Tween(secondView,"rotationY",Strong.easeOut,90,0,duration / 2,true);				firstView.visible = true;			}		}	}}