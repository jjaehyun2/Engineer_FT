/* * Licensed under the MIT License *  * Copyright (c) 2010 Specialmoves Ltd *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. *  * http://github.com/specialmoves/FluorineConnection * http://www.opensource.org/licenses/mit-license.php */package com.specialmoves.remoting.fluorine {	/**	 * A collection of useful functions when testing, debugging or just working with Fluorine connections.	 * 	 * @author mattbilson 22 Jan 2010	 * @version 3.0	 */	public class FluorineUtils {			/**		 * Generic handler for responder errors. Traces out the error message.		 * 		 * @param e The object returned from the backend. This will be parsed into a <code>FluorineError</code>, and then traced 		 */		public static function onError(e: Object) : void {			var error : FluorineError = new FluorineError(e);			var msg:String = error.toString();			switch(error.level) {				case "error" :					trace("ERROR : " + msg);				break;				case "status" :					trace(msg);				break;				case "warning" :					trace("WARN : " + msg);					break;				default :					trace(msg);			}		}		}	}