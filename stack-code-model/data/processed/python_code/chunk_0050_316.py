class DialogueCenteredList extends Shared.CenteredScrollingList{	var EntriesA: Array;		var bDisableInput: Boolean;	var bRecenterSelection: Boolean;		var fCenterY: Number;	var fListHeight: Number;	var iListItemsShown: Number;	var iMaxItemsShown: Number;	var iNumTopHalfEntries: Number;	var iPlatform: Number;	var iScrollPosition: Number;	var iSelectedIndex: Number;		var ExtEntry4: MovieClip;	var ExtEntry3: MovieClip;	var ExtEntry2: MovieClip;	var ExtEntry1: MovieClip;	static var myData = new Object();	function DialogueCenteredList()    {        super();        fCenterY = this.GetClipByIndex(iNumTopHalfEntries)._y + this.GetClipByIndex(iNumTopHalfEntries)._height / 2;        DialogueCenteredList.setup();					ExtEntry4.onRollOver = function ()			{		        _parent.ExtEntry1.onGone();		        _parent.ExtEntry2.onGone();				_parent.ExtEntry3.onGone();				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.doSetSelectedIndex(-2, 0);					//_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_selected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_selected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						ExtEntry3.onRollOver = function ()			{		        _parent.ExtEntry1.onGone();		        _parent.ExtEntry2.onGone();				_parent.ExtEntry4.onGone();				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.doSetSelectedIndex(-2, 0);					//_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_selected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_selected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						ExtEntry2.onRollOver = function ()			{				_parent.ExtEntry4.onGone();		       	_parent.ExtEntry3.onGone();				_parent.ExtEntry1.onGone();		        				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.doSetSelectedIndex(-3, 0);					//_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_selected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_selected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;				}			};						ExtEntry1.onRollOver = function ()			{  				_parent.ExtEntry4.onGone();				_parent.ExtEntry3.onGone();		    	_parent.ExtEntry2.onGone();				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.doSetSelectedIndex(-4, 0);					//_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_selected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_selected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;				}			};						ExtEntry4.onGone = function ()			{				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_unselected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_unselected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						ExtEntry3.onGone = function ()			{				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_unselected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_unselected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						ExtEntry2.onGone = function ()			{				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_unselected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_unselected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						ExtEntry1.onGone = function ()			{				if (!_parent.listAnimating && !_parent.bDisableInput ) {					_parent.bMouseDrivenNav = true;					var textFormat = new TextFormat();                    textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;          			textFormat.font = DialogueCenteredList.myData.font;					this.textField.textColor = DialogueCenteredList.myData.newtopic_unselected_font_color;                    textFormat.size = DialogueCenteredList.myData.newtopic_unselected_font_size;					this.textField.setTextFormat(textFormat);                    this.textField.multiline = true;                    this.textField.wordWrap = true;                    this.textField._width = DialogueCenteredList.myData.topiclist_width;           				}			};						/*ExtEntry3.onPress = function (aiMouseIndex, aiKeyboardOrMouse)			{									_parent.onItemPress(aiKeyboardOrMouse);					if (!_parent.bDisableInput && onMousePress != undefined)						onMousePress();							};						ExtEntry3.onPressAux = function (aiMouseIndex, aiKeyboardOrMouse, aiButtonIndex)			{				 					_parent.onItemPressAux(aiKeyboardOrMouse, aiButtonIndex);			};*/		    }    function SetEntryText(aEntryClip: MovieClip, aEntryObject: Object): Void    {   		super.SetEntryText(aEntryClip, aEntryObject);				ExtEntry4.onGone();	    ExtEntry3.onGone();		ExtEntry1.onGone();		ExtEntry2.onGone();		        if (aEntryClip.textField != undefined)        {            var textFormat = new TextFormat();            textFormat.bullet = DialogueCenteredList.myData.bulleted_topics;            textFormat.font = DialogueCenteredList.myData.font;            if (aEntryObject == this.selectedEntry)            {                aEntryClip._alpha = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_selected_font_alpha) : (DialogueCenteredList.myData.oldtopic_selected_font_alpha);                aEntryClip.textField.textColor = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_selected_font_color) : (DialogueCenteredList.myData.oldtopic_selected_font_color);                textFormat.size = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_selected_font_size) : (DialogueCenteredList.myData.oldtopic_selected_font_size);            }            else            {                aEntryClip._alpha = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_unselected_font_alpha) : (DialogueCenteredList.myData.oldtopic_unselected_font_alpha);                aEntryClip.textField.textColor = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_unselected_font_color) : (DialogueCenteredList.myData.oldtopic_unselected_font_color);                textFormat.size = aEntryObject.topicIsNew == undefined || aEntryObject.topicIsNew ? (DialogueCenteredList.myData.newtopic_unselected_font_size) : (DialogueCenteredList.myData.oldtopic_unselected_font_size);            }			            var textFilter = new flash.filters.DropShadowFilter(4, 45, 0, 0.800000, 7, 7, 2, 3);            if (DialogueCenteredList.myData.topiclist_dropshadow == true)            {                aEntryClip.textField.filters = [textFilter];            }			            aEntryClip.textField.setTextFormat(textFormat);            aEntryClip.textField.multiline = true;            aEntryClip.textField.wordWrap = true;            aEntryClip.textField._width = DialogueCenteredList.myData.topiclist_width;        }    }		    function UpdateList(): Void    {        var listItemSpacing = 0;        var listCumulativeHeight = 0;		        var centerIndex: Number = iScrollPosition - iNumTopHalfEntries < 0 ? (0) : (iScrollPosition - iNumTopHalfEntries);        iListItemsShown = 0;        for (var i = 0; i < iNumTopHalfEntries; ++i)        {            var listItem: MovieClip = this.GetClipByIndex(i);            if (iScrollPosition - iNumTopHalfEntries + i >= 0)            {                this.SetEntry(listItem, EntriesA[centerIndex]);                listItem._visible = true;                listItem.itemIndex = centerIndex;                EntriesA[centerIndex].clipIndex = i;                ++centerIndex;            }            else            {                this.SetEntry(listItem, {text: " "});                listItem._visible = false;                listItem.itemIndex = undefined;            }            listItem._y = listItemSpacing + listCumulativeHeight;            listCumulativeHeight = listCumulativeHeight + listItem._height;            ++iListItemsShown;        }		        if (bRecenterSelection)        {            iSelectedIndex = centerIndex;        }		        for (var i = centerIndex; i < EntriesA.length && iListItemsShown < iMaxItemsShown; ++i)        {            listItem = this.GetClipByIndex(iListItemsShown);            this.SetEntry(listItem, EntriesA[i]);            EntriesA[i].clipIndex = iListItemsShown;            listItem.itemIndex = i;            listItem._y = listItemSpacing + listCumulativeHeight;            listItem._visible = true;            listCumulativeHeight = listCumulativeHeight + listItem._height;            if (iListItemsShown < iMaxItemsShown)            {                ++iListItemsShown;            }        }		        for (var i = iListItemsShown; i < iMaxItemsShown; ++i)        {            this.GetClipByIndex(i)._visible = false;            this.GetClipByIndex(i).itemIndex = undefined;        }		        bRecenterSelection = false;        this.RepositionEntries();		        var imaxItemsBelowShown: Number = 3;		        _parent.ScrollIndicators.Up._visible = this.scrollPosition > iNumTopHalfEntries;        _parent.ScrollIndicators.Down._visible = EntriesA.length - this.scrollPosition - 1 > imaxItemsBelowShown || listCumulativeHeight > fListHeight;        		if (this.selectedIndex < 7)        {            this.scrollPosition(EntriesA.length < 8 ? (int((EntriesA.length - 1) / 2)) : (4));        }    }	    function RepositionEntries()    {		var item_yOffset = this.GetClipByIndex(iNumTopHalfEntries)._y + this.GetClipByIndex(iNumTopHalfEntries)._height / 2;        var item_yPosition = fCenterY - item_yOffset;		        for (var i = 0; i < iMaxItemsShown; ++i)        {            this.GetClipByIndex(i)._y = this.GetClipByIndex(i)._y + item_yPosition;        }    }	    function SetSelectedTopic(aiTopicIndex: Number): Void    {           iSelectedIndex = 0;        iScrollPosition = 0;		        for (var i = 0; i < EntriesA.length; ++i)        {            if (EntriesA[i].topicIndex == aiTopicIndex)            {                iScrollPosition = i            }        }    }		function SetInitialPosition(): Void    {		this.selectedIndex = 0        iSelectedIndex = 0;		iScrollPosition = (EntriesA.length < 8 ? (int((EntriesA.length - 1) / 2)) : (4));    }				    static function trim(s)    {        var strStart = 0;        var strEnd = s.length - 1;        while (s.charCodeAt(strStart) < 33)        {            ++strStart;        }        while (s.charCodeAt(strEnd) < 33)        {            --strEnd;        }        return (s.substring(strStart, strEnd + 1));    }	    static function setup()    {        var formatData = {font: "$EverywhereMediumFont",							topiclist_font_size: 24, topiclist_font_color: 16379359, topiclist_font_alpha: 100,							topiclist_dropshadow: false,							subtitle_font_size: 22, subtitle_font_color: 16379359, subtitle_font_alpha: 100,							subtitle_dropshadow: false,							speaker_font_size: 24, speaker_font_color: 16379359, speaker_font_alpha: 100,							speaker_text_pos_x: 0, speaker_text_pos_y: -25, speaker_text_vertical: false,							speaker_text_width: 200, speaker_name_enable: true, speaker_name_dropshadow: false,							bulleted_topics: false,							exitbutton_font_size: 20, exitbutton_font_color: 16379359, exitbutton_font_alpha: 100,							exitbutton_enable: true,							newtopic_selected_font_size: 24,							newtopic_selected_font_color: 4145087, newtopic_selected_font_alpha: 100,							newtopic_unselected_font_size: 24,							newtopic_unselected_font_color: 16379359, newtopic_unselected_font_alpha: 100,							oldtopic_selected_font_size: 24,							oldtopic_selected_font_color: 4145087, oldtopic_selected_font_alpha: 100,							oldtopic_unselected_font_size: 24,							oldtopic_unselected_font_color: 10063229, oldtopic_unselected_font_alpha: 80,							topiclist_pos_x: 20, topiclist_pos_y: -27, topiclist_width: 600};        DialogueCenteredList.myData = formatData;    }		    function onMouseWheel(delta: Number): Void    {        if (!bDisableInput)        {            if (delta < 0)            {                this.moveSelectionDown();            }            else            {                this.moveSelectionUp();            }        }    }		function doSetSelectedIndex(aiNewIndex:Number, aiKeyboardOrMouse: Number): Void	{		if (!bDisableSelection && aiNewIndex != iSelectedIndex) {			var iCurrentIndex: Number = iSelectedIndex;			iSelectedIndex = aiNewIndex;						if (iCurrentIndex != -1)				SetEntry(GetClipByIndex(EntriesA[iCurrentIndex].clipIndex),EntriesA[iCurrentIndex]);			if (iSelectedIndex != -1) {				if (iPlatform != 0) {					if (iSelectedIndex < iScrollPosition)						scrollPosition = iSelectedIndex;					else if (iSelectedIndex >= iScrollPosition + iListItemsShown)						scrollPosition = Math.min(iSelectedIndex - iListItemsShown + 1, iMaxScrollPosition);					else						SetEntry(GetClipByIndex(EntriesA[iSelectedIndex].clipIndex),EntriesA[iSelectedIndex]);				} else {					SetEntry(GetClipByIndex(EntriesA[iSelectedIndex].clipIndex),EntriesA[iSelectedIndex]);				}			}			dispatchEvent({type:"selectionChange", index:iSelectedIndex, keyboardOrMouse:aiKeyboardOrMouse});		}	}	    function moveSelectionDown()    {			if (this.selectedIndex==-3){			this.selectedIndex=-4;			ExtEntry1.onRollOver();		}		else if (this.selectedIndex==-2 ){			this.selectedIndex=-3;			ExtEntry2.onRollOver();		}		else {					     if (this.selectedIndex==-4){			     this.selectedIndex=-1;			 }          var filter = this.filterer.GetNextFilterMatch(this.selectedIndex);          if (filter != undefined && filter <= EntriesA.length - 1 && filter >= 0)          {			  this.selectedIndex(++this.selectedIndex);              if ( filter > this.scrollPosition - 5 && this.scrollPosition < EntriesA.length - 4)              {                  this.scrollPosition(++this.scrollPosition);              }          }		}    }	    function moveSelectionUp()    {		if (this.selectedIndex==0 && ExtEntry1._visible){			this.selectedIndex=-4;			ExtEntry1.onRollOver();		}		else if (this.selectedIndex==-4 && ExtEntry2._visible){			this.selectedIndex=-3;			ExtEntry2.onRollOver();		}		else if (this.selectedIndex==-3 && ExtEntry3._visible){			this.selectedIndex=-2;			ExtEntry3.onRollOver();		}		else{        	var filter = this.filterer.GetPrevFilterMatch(this.selectedIndex);          	if (filter != undefined && filter <= EntriesA.length - 1 && filter >= 0)          	{            	this.selectedIndex(--this.selectedIndex);              	if (filter <= this.scrollPosition - 5)              	{                  	this.scrollPosition(--this.scrollPosition);              	}          	}		}    }				    function moveSelectionBottom()    {    	if (EntriesA.length > 0)        {            this.selectedIndex(EntriesA.length - 1);        }        if (EntriesA.length > 8 && this.scrollPosition < EntriesA.length - 4)        {            this.scrollPosition(EntriesA.length - 4);        }        this.UpdateList();    }	    function moveSelectionTop()    {        if (EntriesA.length > 0)        {            if (EntriesA.length >= 4)            {                this.scrollPosition(4);            }            this.selectedIndex(0);            this.UpdateList();        }    }		    function moveSelectionPageDown()    {        if (EntriesA.length > 0 && this.selectedIndex <= EntriesA.length - 1)        {            this.selectedIndex(this.selectedIndex + 8 <= EntriesA.length - 1 ? (this.selectedIndex + 8) : (EntriesA.length - 1));            this.scrollPosition(this.selectedIndex >= EntriesA.length - 7 && EntriesA.length > 8 ? (EntriesA.length - 4) : (this.selectedIndex + 4));            this.UpdateList();        }    }	    function moveSelectionPageUp()    {        if (EntriesA.length > 0)        {            this.selectedIndex(this.selectedIndex - 8 > 0 ? (this.selectedIndex - 8) : (0));            this.scrollPosition(this.selectedIndex + 4);            this.UpdateList();        }    }	}