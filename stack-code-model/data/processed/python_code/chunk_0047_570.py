package com.lessrain.project.view {	import com.lessrain.project.view.utils.ObjectUtils;	import com.lessrain.project.model.vo.BuyableData;	import com.lessrain.project.view.components.ItemBuyEvent;	import com.lessrain.debug.Debug;	import com.lessrain.project.ApplicationFacade;	import com.lessrain.project.model.vo.SurfaceData;	import com.lessrain.project.view.components.Application;	import com.lessrain.project.view.components.Blocker;	import com.lessrain.project.view.components.facebook.FacebookConnector;	import com.lessrain.project.view.components.surfaces.SurfaceEvent;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.utilities.statemachine.StateMachine;	import flash.display.BitmapData;	import flash.events.Event;	import flash.utils.getQualifiedClassName;	/**	 * @author torstenhartel	 */	public class FacebookMediator extends Mediator {		public static const NAME : String = getQualifiedClassName(FacebookMediator);		private var _waitingForPost : Boolean;		public function FacebookMediator(facebookConnector_ : FacebookConnector) {			super(NAME, facebookConnector_);			facebookConnector.addEventListener(Blocker.HIDDEN, onPostDone);			facebookConnector.addEventListener(FacebookConnector.DOWNLOAD, sendDownloadNotification);			facebookConnector.addEventListener(ItemBuyEvent.BOUGHT, onItemBought);//			facebookConnector.addEventListener(FacebookConnector.DISCONNECTED, onDisconnected);		}		private function sendDownloadNotification(event : Event) : void {			sendNotification(ApplicationFacade.SAVE_IMAGE, facebookConnector.downloadBitmap, facebookConnector.currentSurface);		}		private function onPostDone(event : Event) : void {			Debug.trace('FacebookMediator::onPostDone:'+facebookConnector.postSuccessful);			sendNotification(ApplicationFacade.FACEBOOK_POST_DONE,facebookConnector.postSuccessful,facebookConnector.currentPostType);		}		private function onItemBought(event : ItemBuyEvent) : void {			Debug.trace('FacebookMediator::onItemBought:'+event.itemData);			sendNotification(ApplicationFacade.ITEM_BOUGHT,event.itemData);		}		override public function listNotificationInterests() : Array {			var interests : Array = new Array();			interests.push(StateMachine.CHANGED);			interests.push(ApplicationFacade.POST_TO_FACEBOOK);			interests.push(ApplicationFacade.SEND_COLLAB);			interests.push(ApplicationFacade.SEND_COMPETITION);			interests.push(ApplicationFacade.SAVE_FOR_LATER);			interests.push(ApplicationFacade.COLLAB_CONFIRMED);			interests.push(ApplicationFacade.ITEM_BUY);			return interests;		}		override public function handleNotification(notification_ : INotification) : void {			switch( notification_.getName()) {				case StateMachine.CHANGED:           					if (notification_.getType()==Application.STATE_MAIN) {						facebookConnector.initialize();					}					break;				case ApplicationFacade.POST_TO_FACEBOOK:					_waitingForPost = true;					var body:Object = notification_.getBody();					facebookConnector.postToFacebook(body.image as BitmapData, body.surface as String, notification_.getType());					break;				case ApplicationFacade.SEND_COLLAB:				case ApplicationFacade.SEND_COMPETITION:					_waitingForPost = true;					var images:Object = notification_.getBody() as Object;					trace("IMAGES: "+ObjectUtils.inspect(images));					var fullImage:BitmapData = images.bgImage;					var canvas:BitmapData = images.noBgImage;					if (notification_.getName() == ApplicationFacade.SEND_COLLAB){						facebookConnector.postCollab(fullImage,canvas,notification_.getType());					} else {						facebookConnector.postCompetition(fullImage,canvas,notification_.getType());					}					break;				case ApplicationFacade.SAVE_FOR_LATER:					_waitingForPost = true;					var graffiti:BitmapData = notification_.getBody().noBgImage;					facebookConnector.saveForLater(graffiti,notification_.getType());					break;				case ApplicationFacade.COLLAB_CONFIRMED:					facebookConnector.onCollabConfirmed(notification_.getBody()  as String, notification_.getType());					break;				case ApplicationFacade.ITEM_BUY:					_waitingForPost = true;					facebookConnector.promptBuyItem(notification_.getBody() as BuyableData);					break;			}		}		override public function onRegister() : void {		}		override public function onRemove() : void {		}		protected function get facebookConnector(): FacebookConnector {			return viewComponent as FacebookConnector;		}	}}