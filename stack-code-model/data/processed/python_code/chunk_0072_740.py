/* Automatically generated by IntelliJ IDEA from Java, revision needed before production use */
/*
 * Copyright (c) 2008, Vaclav Slovacek. All Rights Reserved.
 *
 * Product: UIProtocol Java
 *
 * This source-code is released under following license:
 * - no release outside i2home project is allowed
 * - this copyright notice must be placed unmodified in every file derived from this source code
 */








// @todo constructor
package uidocument.commons.api.document {
/**
 * ProtocolDocument represents single message exchanged between client and server. This class can be used
 * for both creating and reading a single document. It is not intended to be used as general manipulator for
 * the document content (as for example DOM frameworks).
 */
public class UIDocument {

    private var interfaces:Array;
    private var updates:Vector.<ModelUpdate>;
    private var events:Array;
    private var actions:Array;

    public function UIDocument():void {

        interfaces = new Array;
        updates = new Vector.<ModelUpdate>;
        events = new Array;
        actions = new Array;
        trace("UIDocument created");
    }

    ;

    /**
     * Adds new interfaces into the document.
     *
     * @param iface
     */
    public function addInterface(iface:Interface):void {
        interfaces.push(iface);
    }

    ;

    /**
     * Adds new model updates to the document.
     *
     * @param update
     */
    public function addModelUpdate(update:ModelUpdate):void {
        for (var i:Number = 0; i < updates.length; i++) {
            if (updates[i].getId()==update.getId()){
                updates[i].update(update);
                return;
            }
        }
        updates.push(update);
    }

    ;

    /**
     * Adds new events to the document.
     *
     * @param event
     */
    public function addEvent(event:Event):void {
        interfaces.push(event);
    }

    ;

    /**
     * Adds new actions to the document.
     *
     * @param action
     */
    public function addAction(action:Action):void {
        actions.push(action);
    }

    ;

    /**
     * Retrieves node contaning events.
     *
     * @return node contaning events
     */
    public function getEvents():Array {
        return events;
    }

    ;

    /**
     * Retrieves node containing interfaces.
     *
     * @return node containing interfaces
     */
    public function getInterfaces():Array {
        return interfaces;
    }

    ;

    /**
     * Retrieves node containing models.
     *
     * @return node containing models
     */
    public function getModelUpdates():Vector.<ModelUpdate> {
        return updates;
    }

    ;

    /**
     * Retrieves actions contained in the document.
     *
     * @return actions contained in the current document
     */
    public function getActions():Array {
        return actions;
    }

    ;
}
}