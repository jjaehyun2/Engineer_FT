package com.segonquart{		import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.DisplacementMapFilter;	import flash.filters.DisplacementMapFilterMode;	import flash.geom.Point;	import flash.media.Sound;			import caurina.transitions.Tweener;		public class JitteryButtonNM extends Sprite{				private var myButton:Sprite;		private var staticTimes:int;		private var fuzzMin:int;		private var fuzzMax:int;		private var dmFilter:DisplacementMapFilter = createDMFilter();		private var staticSound:Sound = new StaticSound();		public function JitteryButtonNM(button:Sprite) {					myButton = button;			myButton.addEventListener(MouseEvent.ROLL_OVER, onButtonRollOver);			myButton.addEventListener(MouseEvent.ROLL_OUT, onButtonRollOut);			addEventListener(Event.ENTER_FRAME, displayStatic);		}		private function setStaticHigh(e:MouseEvent = null):void {				fuzzMin = 12;			fuzzMax = 25;			staticTimes = 12;		}				private function onButtonRollOver(e:MouseEvent):void {			Tweener.addTween(myButton, {scaleX: 1.1, time: .5, transition: "easeOutElastic"});			setStaticHigh();			staticSound.play();		}				private function onButtonRollOut(e:MouseEvent):void {			Tweener.addTween(myButton, {scaleX: 1, time: .5, transition: "easeOutElastic"});			setStaticMedium();		}				private function setStaticMedium(e:MouseEvent = null):void {			fuzzMin = 2;			fuzzMax = 6;			staticTimes = randRange(8, 12);		}		private function displayStatic(e:Event):void {			staticTimes --;				dmFilter.scaleX = randRange(fuzzMin, fuzzMax);			dmFilter.mapPoint = new Point(0, randRange(0, -160));			myButton.filters = new Array(dmFilter);				if(staticTimes <= 0){				fuzzMin = 0;				fuzzMax = 2;			}		}		private function createDMFilter():DisplacementMapFilter {					var mapBitmap:BitmapData = new StaticMap(0,0); 			var mapPoint:Point       = new Point(0, 0);  			var channels:uint        = BitmapDataChannel.RED; 			var componentX:uint      = channels;			var componentY:uint      = channels;			var scaleX:Number        = 8; 			var scaleY:Number        = 4;			var mode:String          = DisplacementMapFilterMode.COLOR;			var color:uint           = 0;			var alpha:Number         = 0;			return new DisplacementMapFilter(							mapBitmap,							mapPoint,							componentX,							componentY,							scaleX,							scaleY,							mode,							color,							alpha	);			}			private function randRange(min:int, max:int):int {		    var randomNum:int = Math.floor(Math.random() * (max - min + 1)) + min;		    return randomNum;		}		}}