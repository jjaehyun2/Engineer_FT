//예시

// {"instruction": "Explain the following code in detail", "input": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1", "output": "This function implements binary search algorithm which finds the position of a target value within a sorted array. It works by comparing the target value to the middle element of the array; if they are unequal, the half in which the target cannot lie is eliminated and the search continues on the remaining half until the target is found. If the search ends with an empty half, the target is not present in the array. This implementation returns the index of the target element if found, or -1 if not found. The time complexity is O(log n), making it efficient for large sorted arrays.", "category": "code_explanation", "language": "python", "source": "codesearchnet"}
// {"instruction": "Write a function that calculates the factorial of a number", "input": "", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "code_generation", "language": "python", "source": "mbpp"}
// {"instruction": "Explain the following JavaScript code", "input": "function debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}", "output": "This JavaScript function implements a debounce utility. Debouncing is a programming practice used to ensure that time-consuming tasks do not fire so often, making them more efficient. Here's how it works:\n\n1. It takes two parameters: `func` (the function to debounce) and `wait` (the time in milliseconds to wait).\n2. It creates a variable `timeout` to store the timeout ID.\n3. It returns a new function that captures any arguments passed to it.\n4. When the returned function is called, it defines a `later` function that will clear the timeout and then call the original function with the captured arguments.\n5. It clears any existing timeout (from previous calls).\n6. It sets a new timeout that will call the `later` function after the specified wait time.\n\nThis is useful in scenarios like search inputs where you want to wait until the user stops typing before making an API call, rather than making a call for every keystroke.", "category": "code_explanation", "language": "javascript", "source": "github_extracted"}